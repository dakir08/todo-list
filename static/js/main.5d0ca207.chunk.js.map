{"version":3,"sources":["reducers/list.ts","actionCreators/listActionCreator.ts","components/utils/index.ts","components/TodoSubmitForm.tsx","components/Tooltip.tsx","components/styles/GeneralStyled.ts","components/TodoListTable/TodoListTableHeader.tsx","components/TodoListTable/ModifyTask.tsx","components/utils/ChartJsPlugins.ts","actionCreators/updateTaskActionCreator.ts","components/TodoListTable/TodoTaskFromTable.tsx","actionCreators/toggleCompleteActionCreator.ts","actionCreators/deleteTaskActionCreator.ts","components/TodoListTable/TodoListTableBody.tsx","components/TodoListTable/TodoListTable.tsx","components/StatisticChart.tsx","components/Title.tsx","components/ProgressTaskChart.tsx","components/Copyright.tsx","components/ContainerBoard.tsx","components/ToDoListBoard.tsx","components/NotFound.tsx","components/ToolBar.tsx","components/SideNavBar/ListItemWithNavLink.tsx","components/SideNavBar/SideNavBarMain.tsx","components/SideNavBar/SideNavBarSetting.tsx","components/SideNavBar/SideNavBar.tsx","components/test.tsx","services/firebase.ts","reducers/authentication.ts","actionCreators/SignOutActionCreator.ts","components/Authentication/SignOutBoard.tsx","components/styles/AuthenticationStyled.ts","components/Authentication/AuthenticationMessage.tsx","components/Authentication/SignUpBoard.tsx","actionCreators/addUserActionCreator.ts","components/HOC/ProtectedRoute.tsx","components/Authentication/SignInBoard.tsx","actionCreators/signInUserActionCreator.ts","components/Firebase.tsx","actionCreators/fetchTasksActionCreator.ts","actionCreators/userLoginWatcherActionCreator.ts","actionCreators/fetchUserInfoActionCreator.ts","App.tsx","serviceWorker.ts","reducers/index.ts","middlewares/businessLogic.ts","middlewares/saga.ts","store.tsx","index.tsx"],"names":["TodoActionTypes","Greeting","getCurrentTimeInString","today","Date","h","String","getHours","padStart","m","getMinutes","s","getSeconds","getCurrentDateInString","dd","getDate","mm","getMonth","yyyy","getFullYear","connect","state","list","todoList","dispatch","addNewTask","id","taskName","currentTime","currentDate","itemName","type","ADD_TASK","payload","isComplete","createdDate","updatedTime","listActionCreators","useState","setTaskName","onSubmit","e","preventDefault","now","Input","value","onChange","currentTarget","placeholder","style","width","Button","variant","color","Span","STooltip","Tooltip","useStyled","makeStyles","theme","root","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","spacing","breakpoints","up","appBarSpacer","content","height","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","TodoTable","minWidth","StyledTableCell","withStyles","head","backgroundColor","palette","common","black","white","TableCell","TodoListTableHeader","TableHead","TableRow","ChartType","updateTask","UPDATE_TASK","updateTaskActionCreator","item","toggleModify","newTaskName","setNewTaskName","handleUpdateTask","className","TextField","target","onKeyPress","key","label","fullWidth","body","fontSize","StyledTableRow","createStyles","action","hover","setComplete","COMPLETE_TASK","toggleCompleteActionCreator","deleteTask","DELETE_TASK","deleteTaskActionCreator","isModified","setIsModified","onDoubleClick","cursor","placement","FormControl","FormControlLabel","control","Checkbox","checked","icon","FavoriteBorder","checkedIcon","Favorite","onClick","TodoListTableBody","page","rowsPerPage","TableBody","slice","map","TodoTaskFromTable","setPage","setRowsPerPage","classes","length","TableContainer","maxHeight","Table","stickyHeader","TablePagination","rowsPerPageOptions","component","count","onChangePage","_","newPage","onChangeRowsPerPage","DefaultChartValue","doughnutChartText","text","fontStyle","sidePadding","minFontSize","lineHeight","Chart","pluginService","register","beforeDraw","chart","config","options","center","ctx","centerConfig","txt","maxFontSize","sidePaddingCalculated","innerRadius","font","stringWidth","measureText","elementWidth","widthRatio","newFontSize","Math","floor","elementHeight","fontSizeToUse","min","wrapText","undefined","textAlign","textBaseline","centerX","chartArea","left","right","centerY","top","bottom","fillStyle","fillText","words","split","line","lines","n","testLine","push","canvasEl","useRef","getChartData","reduce","result","aTodo","todo","currentTask","find","date","taskComplete","taskNumber","completedTaskNumber","DEFAULT_COMPLETED_TASK_NUMBER","DEFAULT_COMPLETE_TASK_NUMBER","DEFAULT_TASK_NUMBER","getLabelsData","chartData","data","renderCreatedTasks","borderColor","fill","borderWidth","renderCompletedTasks","getDatasetsData","useEffect","statisticChart","current","getContext","canvas","LINE","labels","datasets","scales","yAxes","ticks","beginAtZero","responsive","maintainAspectRatio","renderChart","destroy","ref","Title","children","Typography","gutterBottom","todayTask","filter","completedTasks","remainingTasks","progressChart","getTaskProgressPercent","toFixed","taskProgressPercentString","taskProgressPercent","substring","getTaskProgressColor","DOUGHNUT","Divider","margin","Copyright","align","Link","href","ContainerBoard","Container","maxWidth","Box","pt","userInfo","user","localUserInfo","fixedHeightPaper","clsx","firstName","name","hr","greeting","GOOD_MORNING","LUNCH_TIME","GOOD_AFTERNOON","GOOD_EVENING","GOOD_NIGHT","getGreetingSentence","Grid","xs","md","lg","Paper","NotFound","redirect","setRedirect","timer","setTimeout","clearTimeout","to","ToolBar","open","openSideNavBar","handleClick","AppBar","Toolbar","IconButton","edge","aria-label","noWrap","Badge","badgeContent","ListItemWithNavLink","ListItem","button","NavLink","ListItemIcon","ListItemText","primary","console","log","Boolean","NaN","uid","List","Dashboard","BarChart","random","toString","PersonalVideo","VpnKeyOutlined","LockOutlined","Settings","ExitToApp","userInitialize","closeSideNavBar","styled","Drawer","Test","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","AuthenticationActionTypes","databaseRef","database","todosRef","child","userRef","auth","signOutAction","USER_LOGOUT","signOut","marginTop","avatar","secondary","main","form","submit","AuthenticationMessage","userStatus","error","success","authenticationInfo","authenticatorStatus","registerNewUser","ADD_NEW_USER","addUserActionCreator","signUpInfo","setSignUpInfo","Avatar","sm","required","autoFocus","autoComplete","lastName","emailAddress","password","justify","RouterLink","signInAction","USER_LOGIN","signInUserActionCreator","signInInfo","SetSignInInfo","fetchTodos","tasks","FETCH_TASKS","watchUserAuthenticateStatus","USER_LOGIN_WATCHER","userLoginWatcherActionCreator","fetchUserInfoAction","FETCH_USER","fetchUserInfoActionCreator","on","snapshot","val","Object","values","sort","a","b","onAuthStateChanged","once","setOpen","CssBaseline","path","render","SignInBoard","LogoutBoard","RegisterBoard","from","exact","window","location","hostname","match","combineReducers","ADD_FETCHED_TASKS","ADD_NEW_USER_SUCCESS","ADD_NEW_USER_FAIL","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","addNewUserToFirebase","verifyUserFromFirebase","businessLogicMW","createUserWithEmailAndPassword","set","put","message","signInWithEmailAndPassword","getUserUid","takeEvery","select","userUniqueId","currentUserTodos","takeLatest","update","remove","fetchTodoListFromFirebase","watchActionFromFirebase","rootSaga","all","sagaMiddleWare","createSagaMW","createStore","reducer","applyMiddleware","run","ReactDOM","Fragment","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"qLAAYA,E,oFAAAA,K,oBAAAA,E,8BAAAA,E,0BAAAA,E,8BAAAA,E,0BAAAA,E,0BAAAA,E,+CAAAA,M,KCEG,ICqBVC,EAtBQC,EAAyB,WACpC,IAAMC,EAAQ,IAAIC,KAEZC,EAAIC,OAAOH,EAAMI,YAAYC,SAAS,EAAG,KACzCC,EAAIH,OAAOH,EAAMO,cAAcF,SAAS,EAAG,KAC3CG,EAAIL,OAAOH,EAAMS,cAAcJ,SAAS,EAAG,KAEjD,MAAM,GAAN,OAAUH,EAAV,YAAeI,EAAf,YAAoBE,IAITE,EAAyB,WACpC,IAAMV,EAAQ,IAAIC,KAEZU,EAAKR,OAAOH,EAAMY,WAAWP,SAAS,EAAG,KACzCQ,EAAKV,OAAOH,EAAMc,WAAa,GAAGT,SAAS,EAAG,KAC9CU,EAAOf,EAAMgB,cAEnB,MAAM,GAAN,OAAUL,EAAV,YAAgBE,EAAhB,YAAsBE,K,SAInBjB,K,4BAAAA,E,qCAAAA,E,gCAAAA,E,4BAAAA,E,wCAAAA,M,KAQE,I,kBCyCQmB,eAZS,SAACC,GACvB,MAAO,CAAEC,KAAMD,EAAME,aAGI,SAACC,GAAD,MAA8B,CACvDC,WAAY,SACVC,EACAC,EACAC,EACAC,GAJU,OAKPL,EFpEQ,SACbE,EACAI,EACAF,EACAC,GAEA,MAAO,CACLE,KAAM/B,EAAgBgC,SACtBC,QAAS,CACPP,KACAC,SAAUG,EACVI,YAAY,EACZC,YAAaN,EACbO,YAAaR,IEuDHS,CAAmBX,EAAIC,EAAUC,EAAaC,QAE/CT,EAlDyB,SAAC,GAAoB,IAAlBK,EAAiB,EAAjBA,WAAiB,EAC1Ba,mBAAS,IADiB,mBACnDX,EADmD,KACzCY,EADyC,KAe1D,OACE,0BACEC,SAAU,SAACC,GACTA,EAAEC,iBAdFf,IACFF,EACErB,KAAKuC,MACLhB,EACAzB,IACAW,KAEF0B,EAAY,OAWZ,kBAACK,EAAA,EAAD,CACEC,MAAOlB,EACPmB,SAAU,SAACL,GACTF,EAAYE,EAAEM,cAAcF,QAE9BG,YAAY,4BACZC,MAAO,CAAEC,MAAO,SAElB,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUtB,KAAK,UAAjD,mB,QC/CN,IAAMuB,EAAI,kNAcJC,EAAQ,iIAORD,EAPQ,0BA0BCE,EAb0B,WACvC,OACE,oCACE,kBAACD,EAAD,iBAEE,kBAACD,EAAD,8BACwB,wCADxB,0B,oDCqDOG,EArFGC,aAAW,SAACC,GAC5B,MAAO,CACLC,KAAM,CACJC,QAAS,QAEXC,QAAS,CACPC,aAAc,IAEhBC,YAAY,aACVH,QAAS,OACTI,WAAY,SACZC,eAAgB,WAChBC,QAAS,SACNR,EAAMS,OAAON,SAElBO,OAAQ,CACNC,OAAQX,EAAMW,OAAOC,OAAS,EAC9BC,WAAYb,EAAMc,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDC,OAAQhB,EAAMc,YAAYE,OAAOC,MACjCC,SAAUlB,EAAMc,YAAYI,SAASC,iBAGzCC,YAAa,CACXC,WA1BqB,IA2BrB9B,MAAM,eAAD,OA3BgB,IA2BhB,OACLsB,WAAYb,EAAMc,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDC,OAAQhB,EAAMc,YAAYE,OAAOC,MACjCC,SAAUlB,EAAMc,YAAYI,SAASI,kBAGzCC,WAAY,CACVC,YAAa,IAEfC,iBAAkB,CAChBvB,QAAS,QAEXwB,MAAO,CACLC,SAAU,GAEZC,YAAa,CACXC,SAAU,WACVC,WAAY,SACZvC,MA7CqB,IA8CrBsB,WAAYb,EAAMc,YAAYC,OAAO,QAAS,CAC5CC,OAAQhB,EAAMc,YAAYE,OAAOC,MACjCC,SAAUlB,EAAMc,YAAYI,SAASI,kBAGzCS,iBAAiB,aACfC,UAAW,SACXnB,WAAYb,EAAMc,YAAYC,OAAO,QAAS,CAC5CC,OAAQhB,EAAMc,YAAYE,OAAOC,MACjCC,SAAUlB,EAAMc,YAAYI,SAASC,gBAEvC5B,MAAOS,EAAMiC,QAAQ,IACpBjC,EAAMkC,YAAYC,GAAG,MAAQ,CAC5B5C,MAAOS,EAAMiC,QAAQ,KAGzBG,aAAcpC,EAAMS,OAAON,QAC3BkC,QAAS,CACPC,OAAQ,QACRX,SAAU,EAEVY,SAAU,QAEZC,UAAW,CACTC,WAAYzC,EAAMiC,QAAQ,GAC1BS,cAAe1C,EAAMiC,QAAQ,IAE/BU,MAAO,CACLnC,QAASR,EAAMiC,QAAQ,GACvB/B,QAAS,OACTqC,SAAU,OACVK,cAAe,UAEjBC,YAAa,CACXP,OA/EqB,KAiFvBQ,UAAW,CACTC,SAAU,S,kCC1EVC,EAAkBC,aAAW,SAACjD,GAAD,MAAmB,CACpDkD,KAAM,CACJC,gBAAiBnD,EAAMoD,QAAQC,OAAOC,MACtC5D,MAAOM,EAAMoD,QAAQC,OAAOE,UAHRN,CAKpBO,KAiBWC,EAfkD,WAC/D,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACX,EAAD,CAAiB1D,MAAO,CAAEC,MAAO,QAAjC,aACA,kBAACyD,EAAD,CAAiB1D,MAAO,CAAEC,MAAO,QAAjC,gBACA,kBAACyD,EAAD,CAAiB1D,MAAO,CAAEC,MAAO,QAAjC,mBAGA,kBAACyD,EAAD,CAAiB1D,MAAO,CAAEC,MAAO,QAAjC,kB,sBCXR,ICCYqE,EDkCGnG,cAAQ,MALI,SAACI,GAAD,MAA8B,CACvDgG,WAAY,SAAC9F,EAAYC,EAAkBS,GAA/B,OACVZ,EE9CW,SACbE,EACAC,EACAS,GAEA,MAAO,CACLL,KAAM/B,EAAgByH,YACtBxF,QAAS,CACPP,KACAC,WACAS,gBFoCOsF,CAAwBhG,EAAIC,EAAUS,QAGpChB,EAnCgC,SAAC,GAIzC,IAHLuG,EAGI,EAHJA,KACAH,EAEI,EAFJA,WACAI,EACI,EADJA,aACI,EACkCtF,mBAASqF,EAAKhG,UADhD,mBACGkG,EADH,KACgBC,EADhB,KAQEC,EAAmB,SAACrG,GACxB8F,EAAW9F,EAAImG,EAAa3H,KAC5B0H,KAGF,OACE,yBAAKI,UAAU,oBACb,kBAACC,EAAA,EAAD,CACEpF,MAAOgF,EACP/E,SAAU,SAACL,GAAD,OAAOqF,EAAerF,EAAEyF,OAAOrF,QACzCsF,WAhBqB,SAAC1F,GACZ,UAAVA,EAAE2F,KACJL,EAAiBJ,EAAKjG,KAepB2G,MAAM,eACNC,WAAW,Q,+DGVb3B,EAAkBC,aAAW,SAACjD,GAAD,MAAmB,CACpD4E,KAAM,CACJC,SAAU,OAFU5B,CAIpBO,KAEEsB,EAAiB7B,aAAW,SAACjD,GAAD,OAChC+E,YAAa,CACX9E,KAAM,CACJ,qBAAsB,CACpBkD,gBAAiBnD,EAAMoD,QAAQ4B,OAAOC,YAJvBhC,CAQrBU,KAmFalG,eAbS,SAACC,GACvB,MAAO,CACLC,KAAMD,EAAME,aAGW,SAACC,GAC1B,MAAO,CACLqH,YAAa,SAACnH,EAAYQ,EAAqBE,GAAlC,OACXZ,ECxHS,SACbE,EACAQ,EACAE,GAEA,MAAO,CACLL,KAAM/B,EAAgB8I,cACtB7G,QAAS,CACPP,KACAQ,aACAE,gBD8GS2G,CAA4BrH,EAAIQ,EAAYE,KACvD4G,WAAY,SAACtH,GAAD,OAAgBF,EEzHjB,SAAiCE,GAC9C,MAAO,CACLK,KAAM/B,EAAgBiJ,YACtBhH,QAASP,GFsH4BwH,CAAwBxH,QAIlDN,EAjFoB,SAAC,GAAuC,IAArC4H,EAAoC,EAApCA,WAAYH,EAAwB,EAAxBA,YAAalB,EAAW,EAAXA,KAAW,EACpCrF,oBAAS,GAD2B,mBACjE6G,EADiE,KACrDC,EADqD,KAmBxE,OACE,oCACE,kBAACX,EAAD,KACE,kBAAC,EAAD,CACEY,cARe,WACrBD,GAAc,IAQRnG,MAAO,CAAEqG,OAAQ,UAAWnF,QAAS,WAEpCgF,EACC,kBAAC,EAAD,CAAYxB,KAAMA,EAAMC,aAhBV,WACtBwB,GAAc,MAiBN,kBAAC,IAAD,CAAS/D,MAAM,eAAekE,UAAU,gBACtC,6BAAM5B,EAAKhG,YAIjB,kBAAC,EAAD,KAAkBgG,EAAKxF,aACvB,kBAAC,EAAD,KACE,kBAACqH,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACEC,QAASjC,EAAKzF,WACdY,SAAU,kBAlCFpB,EAkCuBiG,EAAKjG,GAlChBQ,GAkCqByF,EAAKzF,gBAjC5D2G,EAAYnH,EAAIQ,EAAYhC,KADP,IAACwB,EAAYQ,GAmCpB2H,KAAM,kBAACC,EAAA,EAAD,MACNC,YAAa,kBAACC,EAAA,EAAD,QAGjB3B,MAAOV,EAAKzF,WAAa,WAAa,cAQ5C,kBAAC,EAAD,KACE,kBAACiB,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,YACN4G,QAAS,kBAvDGvI,EAuDgBiG,EAAKjG,QAtDzCsH,EAAWtH,GADQ,IAACA,IAoDd,qBG1EKwI,EAhB8C,SAAC,GAIvD,IAHLC,EAGI,EAHJA,KACAC,EAEI,EAFJA,YACA7I,EACI,EADJA,SAEA,OACE,kBAAC8I,EAAA,EAAD,KACG9I,EACE+I,MAAMH,EAAOC,EAAaD,EAAOC,EAAcA,GAC/CG,KAAI,SAAC5C,GAAD,OACH,kBAAC6C,EAAD,CAAmB7C,KAAMA,EAAMS,IAAKT,EAAKjG,UC8CpCN,eANS,SAACC,GACvB,MAAO,CACLC,KAAMD,EAAME,YAIDH,EAnDoD,SAAC,GAE7D,IADLE,EACI,EADJA,KACI,EACoBgB,mBAAS,GAD7B,mBACG6H,EADH,KACSM,EADT,OAEkCnI,mBAAS,IAF3C,mBAEG8H,EAFH,KAEgBM,EAFhB,KAGEC,EAAUlH,IAShB,OACE,oCACE,kBAAC,EAAD,MACA,2BACmB,IAAhBnC,EAAKsJ,OACF,2BADH,gBAEYtJ,EAAKsJ,OAFjB,gBAE+BtJ,EAAKsJ,OAAS,EAAI,IAAM,GAFvD,OAIH,kBAACC,EAAA,EAAD,CAAgB5H,MAAO,CAAE6H,UAAW,KAAO9C,UAAU,mBACnD,kBAAC+C,EAAA,EAAD,CAAO/C,UAAW2C,EAAQlE,UAAWuE,cAAY,GAC/C,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEb,KAAMA,EACNC,YAAaA,EACb7I,SAAUD,MAIhB,kBAAC2J,EAAA,EAAD,CACEC,mBAAoB,CAAC,GAAI,GAAI,GAAI,GAAI,KACrCC,UAAU,MACVC,MAAO9J,EAAKsJ,OACZR,YAAaA,EACbiB,aA9BmB,SAACC,EAAYC,GACpCd,EAAQc,IA8BJC,oBA5B0B,SAAC/I,GAC/BiI,GAAgBjI,EAAEyF,OAAOrF,OACzB4H,EAAQ,IA2BJN,KAAMA,Q,uDNtCF5C,K,YAAAA,E,UAAAA,E,8BAAAA,E,cAAAA,E,oBAAAA,E,sBAAAA,E,gBAAAA,E,UAAAA,E,mBAAAA,M,KAqBL,IO/BFkE,GP+BQC,GAAoB,SAAC,GAOG,IANnCC,EAMkC,EANlCA,KAMkC,IALlCtI,aAKkC,MAL1B,UAK0B,MAJlCuI,iBAIkC,MAJtB,QAIsB,MAHlCC,mBAGkC,MAHpB,GAGoB,MAFlCC,mBAEkC,MAFpB,GAEoB,MADlCC,kBACkC,MADrB,GACqB,EAsFlC,OArFAC,KAAMC,cAAcC,SAAS,CAC3BC,WAAY,SAAUC,GAAa,IAAD,EAChC,aAAIA,EAAMC,OAAOC,eAAjB,aAAI,EAAsBC,OAAQ,CAEhC,IAAIC,EAAMJ,EAAMA,MAAMI,IAGlBC,EAAeL,EAAMC,OAAOC,QAAQC,OACpCX,EAAYa,EAAab,WAAa,QACtCc,EAAMD,EAAad,KACnBtI,EAAQoJ,EAAapJ,OAAS,OAC9BsJ,EAAcF,EAAaE,aAAe,GAE1CC,GADcH,EAAaZ,aAAe,IAE7B,KAA4B,EAApBO,EAAMS,aAE/BL,EAAIM,KAAO,QAAUlB,EAGrB,IAAImB,EAAcP,EAAIQ,YAAYN,GAAKxJ,MACnC+J,EAAmC,EAApBb,EAAMS,YAAkBD,EAGvCM,EAAaD,EAAeF,EAC5BI,EAAcC,KAAKC,MAAM,GAAKH,GAC9BI,EAAoC,EAApBlB,EAAMS,YAGtBU,EAAgBH,KAAKI,IAAIL,EAAaG,EAAeX,GACrDb,EAAcW,EAAaX,YAC3BC,EAAaU,EAAaV,YAAc,GACxC0B,GAAW,OAEKC,IAAhB5B,IACFA,EAAc,IAGZA,GAAeyB,EAAgBzB,IACjCyB,EAAgBzB,EAChB2B,GAAW,GAIbjB,EAAImB,UAAY,SAChBnB,EAAIoB,aAAe,SACnB,IAAIC,GAAWzB,EAAM0B,UAAUC,KAAO3B,EAAM0B,UAAUE,OAAS,EAC3DC,GAAW7B,EAAM0B,UAAUI,IAAM9B,EAAM0B,UAAUK,QAAU,EAI/D,GAHA3B,EAAIM,KAAOS,EAAgB,MAAQ3B,EACnCY,EAAI4B,UAAY/K,GAEXoK,EAEH,YADAjB,EAAI6B,SAAS3B,EAAKmB,EAASI,GAS7B,IALA,IAAIK,EAAQ5B,EAAI6B,MAAM,KAClBC,EAAO,GACPC,EAAQ,GAGHC,EAAI,EAAGA,EAAIJ,EAAM1D,OAAQ8D,IAAK,CACrC,IAAIC,EAAWH,EAAOF,EAAMI,GAAK,IACnBlC,EAAIQ,YAAY2B,GACNzL,MACR+J,GAAgByB,EAAI,GAClCD,EAAMG,KAAKJ,GACXA,EAAOF,EAAMI,GAAK,KAElBF,EAAOG,EAKXV,GAAYQ,EAAM7D,OAAS,EAAKmB,EAEhC,IAAS2C,EAAI,EAAGA,EAAID,EAAM7D,OAAQ8D,IAChClC,EAAI6B,SAASI,EAAMC,GAAIb,EAASI,GAChCA,GAAWlC,EAGbS,EAAI6B,SAASG,EAAMX,EAASI,OAK3B,CACLtC,OACAtI,QACAuI,YACAC,cACAC,cACAC,gB,SOlICN,O,6CAAAA,I,+DAAAA,I,kEAAAA,Q,KAgBL,IA8HerK,gBANS,SAACC,GACvB,MAAO,CACLE,SAAUF,EAAME,YAILH,EA9H0C,SAAC,GAAkB,IAAhBG,EAAe,EAAfA,SACpDsN,EAAWC,iBAA0B,MAUrCC,EAAexN,EAASyN,QAAO,SAACC,EAAqBC,GACzD,IAT0BC,EASpBC,EAAcH,EAAOI,MAAK,SAACF,GAAD,OAAUA,EAAKG,OAASJ,EAAM/M,eAExDoN,GAAoC,IAArBL,EAAMhN,WAE3B,OAAIkN,GACFA,EAAYI,aAERD,GACFH,EAAYK,sBAGPR,GAGH,GAAN,mBAAWA,GAAX,EAvB0BE,EAuBYD,EAvBsB,CAC5DI,KAAMH,EAAKhN,YACXsN,oBAAqBN,EAAKjN,WACtBuJ,GAAkBiE,8BAClBjE,GAAkBkE,6BACtBH,WAAY/D,GAAkBmE,0BAmB7B,IAEGC,EAAgB,SAACC,GACrB,OAAOA,EAAUvF,KAAI,SAACwF,GAAD,OAAUA,EAAKT,KAAKhF,MAAM,EAAG,OAG9C0F,EAAqB,SAACF,GAC1B,MAAO,CACLC,KAAMD,EAAUvF,KAAI,SAACwF,GAAD,OAAUA,EAAKP,cACnCnH,MAAO,gBACP4H,YAAa,wBACbnJ,gBAAiB,0BACjBoJ,MAAM,EACNC,YAAa,IAIXC,EAAuB,SAACN,GAC5B,MAAO,CACLC,KAAMD,EAAUvF,KAAI,SAACwF,GAAD,OAAUA,EAAKN,uBACnCpH,MAAO,kBACP4H,YAAa,wBACbnJ,gBAAiB,0BACjBoJ,MAAM,EACNC,YAAa,IAIXE,EAAkB,SAACP,GACvB,MAAO,CAACE,EAAmBF,GAAYM,EAAqBN,KAqD9D,OAVAQ,qBAAU,WACR,IAAMC,EAtBY,WAClB,IAAY,OAAR1B,QAAQ,IAARA,OAAA,EAAAA,EAAU2B,UAAWjP,EAASqJ,OAAQ,CACxC,IAAM4B,EAAMqC,EAAS2B,QAAQC,WAAW,MAElCX,EAAyBf,EAE/B,GAAIvC,EAGF,OAFAA,EAAIkE,OAAOzK,OAAS,IAEb,IAAI+F,SAAMQ,EAAK,CACpBzK,KAAMwF,EAAUoJ,KAChBZ,KAAM,CACJa,OAAQf,EAAcC,GACtBe,SAAUR,EAAgBP,IAE5BxD,QAjCC,CACLwE,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,aAAa,MAKrBC,YAAY,EACZC,qBAAqB,MA6BAC,GAEvB,OAAO,WACS,OAAdb,QAAc,IAAdA,KAAgBc,aAIjB,CAACtC,IAGF,yBAAK/G,UAAU,cACZzG,EAASqJ,OAAS,EACjB,6BACE,4BAAQ0G,IAAKzC,KAEb,S,SC9HK0C,GARU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,OACE,kBAACC,GAAA,EAAD,CAAYtG,UAAU,KAAK/H,QAAQ,KAAKC,MAAM,UAAUqO,cAAY,GACjEF,I,UCkHQpQ,gBANS,SAAC,GACvB,MAAO,CACLG,SAF6C,EAAtBA,YAMZH,EA3GoC,SAAC,GAAkB,IAAhBG,EAAe,EAAfA,SAChDsN,EAAWC,iBAA0B,MAEnC8B,EAAS,CAAC,kBAAmB,mBAE7Be,EAAYpQ,EAASqQ,QACzB,SAAC1C,GAAD,OAAWA,EAAM/M,cAAgBtB,OACjC+J,OAEIiH,EAAiBtQ,EAASqQ,QAC9B,SAAC1C,GAAD,OACEA,EAAM/M,cAAgBtB,MACD,IAArBqO,EAAMhN,cACR0I,OAEIkH,EACJvQ,EAASqQ,QAAO,SAAC1C,GAAD,OAAWA,EAAM/M,cAAgBtB,OAC9C+J,OAASiH,EAgEd,OARAvB,qBAAU,WACR,IAAMyB,EAvDY,WAAO,IAAD,EAClBvF,EAAG,UAAGqC,EAAS2B,eAAZ,aAAG,EAAkBC,WAAW,MAEnCuB,EAAyB,WAC7B,OAAOzQ,EAASqJ,OAAT,WACEiH,EAAiBF,EAAa,KAAKM,QAAQ,GAD7C,KAEH,IAuBApB,EAA4B,CAChC,CACEd,KAAM,CAAC8B,EAAgBC,GACvBhL,gBAAiB,CAvBQ,WAC3B,IAAMoL,EAA4BF,IAE5BG,GAAuBD,EAA0BE,UACrD,EACAF,EAA0BtH,OAAS,GAGrC,QAAQ,GACN,KAA6B,MAAxBuH,EACH,MAAO,wBACT,KAAKA,GAAuB,GAC1B,MAAO,wBACT,KAAKA,GAAuB,GAC1B,MAAO,wBACT,QACE,MAAO,yBAOSE,GAAwB,wBAS9C,GAAIV,EACF,OAAO,IAAI3F,KAAMQ,EAAM,CACrBzK,KAAMwF,EAAU+K,SAChBvC,KARmC,CACrCa,SACAC,YAOEvE,QAAS,CACPC,OAAQb,GAAkB,CACxBC,KAAMqG,IACNlG,YAAa,QAOCsF,GAEtB,OAAO,WACDO,GAAWI,EAAeV,aAE/B,CAACQ,EAAgBC,IAGlB,yBAAK9J,UAAU,iBAAiB/E,MAAO,CAAEC,MAAO,OAAQ+C,OAAQ,SAC7D0L,EAAY,EACX,oCACG,IACD,4BAAQL,IAAKzC,IACb,kBAAC0D,GAAA,EAAD,CAAStP,MAAO,CAAEuP,OAAQ,aAAepP,QAAQ,cACjD,yBAAKH,MAAO,CAAE0K,UAAW,WACH,IAAnBmE,EAAA,wFAEeA,EAFf,mCAML,+D,8BC5FOW,GAZ8B,WAC3C,OACE,kBAAChB,GAAA,EAAD,CAAYrO,QAAQ,QAAQC,MAAM,gBAAgBqP,MAAM,UACrD,aACD,kBAACC,GAAA,EAAD,CAAMtP,MAAM,UAAUuP,KAAK,4BAA3B,oCAGC,kBCYQC,GAhBkB,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAC5B7G,EAAUlH,IAChB,OACE,0BAAMuE,UAAW2C,EAAQ3E,SACvB,yBAAKgC,UAAW2C,EAAQ5E,eACxB,kBAAC+M,GAAA,EAAD,CAAWC,SAAS,KAAK/K,UAAW2C,EAAQxE,WAC1C,oCAAGqL,GAEH,kBAACwB,GAAA,EAAD,CAAKC,GAAI,EAAGhQ,MAAO,CAAE0K,UAAW,WAC9B,kBAAC,GAAD,UC4CKvM,gBAJS,SAACC,GAAD,MAAmB,CACzC6R,SAAU7R,EAAM8R,KAAKC,iBAGRhS,EArCkC,SAAC,GAAkB,IAAhB8R,EAAe,EAAfA,SAC5CvI,EAAUlH,IAEV4P,EAAmBC,YAAK3I,EAAQrE,MAAOqE,EAAQnE,aAErD,OACE,kBAAC,GAAD,KACE,4BAAK0M,EAASK,WlBAe,SAACC,GAClC,IAAMC,GAAK,IAAIrT,MAAOG,WAClBmT,EAAW,GAEf,QAAQ,GACN,KAAKD,GAAM,GACTC,EAAWzT,EAAS0T,aACpB,MACF,KAAY,KAAPF,EACHC,EAAWzT,EAAS2T,WACpB,MACF,KAAKH,GAAM,GACTC,EAAWzT,EAAS4T,eACpB,MACF,KAAKJ,GAAM,GACTC,EAAWzT,EAAS6T,aACpB,MACF,QACEJ,EAAWzT,EAAS8T,WAGxB,MAAM,GAAN,OAAUL,EAAV,YAAsBF,EAAtB,KkBrB+BQ,CAAoBd,EAASK,YACxD,kBAACU,EAAA,EAAD,CAAM9N,WAAS,EAACP,QAAS,GACvB,kBAACqO,EAAA,EAAD,CAAMtM,MAAI,EAACuM,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC5B,kBAACC,EAAA,EAAD,CAAOrM,UAAWqL,GAChB,kBAAC,GAAD,cACA,kBAAC,GAAD,QAGJ,kBAACY,EAAA,EAAD,CAAMtM,MAAI,EAACuM,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC5B,kBAACC,EAAA,EAAD,CAAOrM,UAAWqL,GAChB,kBAAC,GAAD,uBACA,kBAAC,GAAD,QAGJ,kBAACY,EAAA,EAAD,CAAMtM,MAAI,EAACuM,GAAI,IACb,kBAACG,EAAA,EAAD,CAAOrM,UAAW2C,EAAQrE,OACxB,kBAAC,GAAD,kBACA,kBAAC,EAAD,MACA,kBAAC,EAAD,aC1BGgO,GAjB4B,WAAO,IAAD,EACfhS,oBAAS,GADM,mBACxCiS,EADwC,KAC9BC,EAD8B,KAQ/C,OANAlE,qBAAU,WACR,IAAMmE,EAAQC,YAAW,WACvBF,GAAY,KACX,KACH,OAAO,kBAAMG,aAAaF,MACzB,IACIF,EACL,kBAAC,IAAD,CAAUK,GAAG,MAEb,kBAAC,GAAD,KACE,wE,4FCyCSC,GAvC0B,SAAC,GAGnC,IAFLC,EAEI,EAFJA,KACaC,EACT,EADJC,YAEMrK,EAAUlH,IAChB,OACE,kBAACwR,GAAA,EAAD,CACEzP,SAAS,WACTwC,UAAWsL,YAAK3I,EAAQtG,OAAQyQ,GAAQnK,EAAQ5F,cAEhD,kBAACmQ,GAAA,EAAD,CAASlN,UAAW2C,EAAQ7G,SAC1B,kBAACqR,GAAA,EAAD,CACEC,KAAK,QACL/R,MAAM,UACNgS,aAAW,cACXpL,QAAS8K,EACT/M,UAAWsL,YAAK3I,EAAQzF,WAAY4P,GAAQnK,EAAQvF,mBAEpD,kBAAC,KAAD,OAEF,kBAACqM,GAAA,EAAD,CACEtG,UAAU,KACV/H,QAAQ,KACRC,MAAM,UACNiS,QAAM,EACNtN,UAAW2C,EAAQtF,OALrB,sBASA,kBAAC8P,GAAA,EAAD,CAAY9R,MAAM,WAChB,kBAACkS,GAAA,EAAD,CAAOC,aAAc,EAAGnS,MAAM,aAC5B,kBAAC,KAAD,W,8GC5BGoS,GAbkD,SAAC,GAI9C,IAHlBb,EAGiB,EAHjBA,GACAvP,EAEiB,EAFjBA,MACAmM,EACiB,EADjBA,SAEA,OACE,kBAACkE,GAAA,EAAD,CAAUC,QAAM,EAACxK,UAAWyK,KAAShB,GAAIA,GACvC,kBAACiB,GAAA,EAAD,KAAerE,GACf,kBAACsE,GAAA,EAAD,CAAcC,QAAS1Q,MCD7B2Q,QAAQC,IAAIC,QAAQC,MAEpB,IAuBe/U,gBAJS,SAACC,GAAD,MAAmB,CACzC8R,KAAM9R,EAAM8R,KAAKC,iBAGJhS,EAvBsC,SAAC,GACpD,OADiE,EAAX+R,KAC1CiD,IACV,kBAACC,GAAA,EAAD,KACE,kBAAC,GAAD,CAAqBzB,GAAG,QAAQvP,MAAM,aACpC,kBAACiR,GAAA,EAAD,OAEF,kBAAC,GAAD,CAAqB1B,GAAG,QAAQvP,MAAM,aACpC,kBAACkR,GAAA,EAAD,OAEF,kBAAC,GAAD,CACE3B,GAAE,WAAMxH,KAAKoJ,SAASC,SAAS,IAAIrE,UAAU,IAC7C/M,MAAM,eAEN,kBAACqR,GAAA,EAAD,QAGF,Q,wCCgBStV,gBAJS,SAACC,GAAD,MAAmB,CACzC8R,KAAM9R,EAAM8R,KAAKC,iBAGJhS,EAhC8C,SAAC,GAAc,IAAZ+R,EAAW,EAAXA,KAC9D,OACE,kBAACkD,GAAA,EAAD,MACIlD,EAAKiD,KACL,oCACE,kBAAC,GAAD,CAAqBxB,GAAG,UAAUvP,MAAM,YACtC,kBAACsR,GAAA,EAAD,OAEF,kBAAC,GAAD,CAAqB/B,GAAG,UAAUvP,MAAM,SACtC,kBAACuR,GAAA,EAAD,QAKLzD,EAAKiD,KACJ,oCACE,kBAAC,GAAD,CAAqBxB,GAAG,WAAWvP,MAAM,mBACvC,kBAACwR,GAAA,EAAD,OAEF,kBAAC,GAAD,CAAqBjC,GAAG,WAAWvP,MAAM,UACvC,kBAACyR,GAAA,EAAD,YCkBG1V,gBAJS,SAACC,GAAD,MAAmB,CACzC0V,eAAgB1V,EAAM8R,KAAK4D,kBAGd3V,EAvCgC,SAAC,GAIzC,IAHL0T,EAGI,EAHJA,KACAkC,EAEI,EAFJA,gBACAD,EACI,EADJA,eAEMpM,EAAUsM,IAEhB,OACE,kBAACC,GAAA,EAAD,CACE9T,QAAQ,YACRuH,QAAS,CACPrE,MAAOgN,YAAK3I,EAAQpF,aAAcuP,GAAQnK,EAAQjF,mBAEpDoP,KAAMA,GAEN,yBAAK9M,UAAW2C,EAAQ3G,aACtB,kBAACmR,GAAA,EAAD,CAAYlL,QAAS+M,GACnB,kBAAC,KAAD,QAGJ,kBAACzE,GAAA,EAAD,MACCwE,EACC,oCACG,IACD,kBAAC,GAAD,MACA,kBAACxE,GAAA,EAAD,MACA,kBAAC,GAAD,OAGF,6CCjCO4E,GARoB,WACjC,OACE,kBAAC,GAAD,KACE,wD,kCCiBNC,KAASC,cAX8B,CACrCC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjBT,KAASU,YAEF,ICVKC,GDUCC,GAAcZ,KAASa,WAAW3G,MAElC4G,GAAWF,GAAYG,MAAM,SAE7BC,GAAUJ,GAAYG,MAAM,SAE5BE,GAAOjB,KAASiB,Q,SChBjBN,K,8BAAAA,E,4CAAAA,E,0CAAAA,E,+BAAAA,E,6CAAAA,E,yDAAAA,E,mDAAAA,E,iCAAAA,E,sDAAAA,Q,KCjBG,ICqCA3W,eAAQ,MAJI,SAACI,GAAD,MAA8B,CACvD8W,cAAe,kBAAM9W,EDjCd,CACLO,KAAMgW,GAA0BQ,kBCmCrBnX,EA3BkC,SAAC,GAAuB,IAArBkX,EAAoB,EAApBA,cAAoB,EACtChW,oBAAS,GAD6B,mBAC/DiS,EAD+D,KACrDC,EADqD,KAatE,OAXAlE,qBAAU,WACR,IAAMmE,EAAQC,YAAW,WACvBF,GAAY,GACZ6D,GAAKG,UACLF,MACC,KAEH,OAAO,WACL3D,aAAaF,MAEd,IACIF,EACL,kBAAC,IAAD,CAAUK,GAAG,YAEb,kBAAC,GAAD,KACE,sDACA,8ECNSnR,GAtBGC,aAAW,SAACC,GAC5B,MAAO,CACL2C,MAAO,CACLmS,UAAW9U,EAAMiC,QAAQ,GACzB/B,QAAS,OACT0C,cAAe,SACftC,WAAY,UAEdyU,OAAQ,CACNlG,OAAQ7O,EAAMiC,QAAQ,GACtBkB,gBAAiBnD,EAAMoD,QAAQ4R,UAAUC,MAE3CC,KAAM,CACJ3V,MAAO,MACPuV,UAAW9U,EAAMiC,QAAQ,IAE3BkT,OAAQ,CACNtG,OAAQ7O,EAAMiC,QAAQ,EAAG,EAAG,Q,UCEnBmT,GAdsD,SAAC,GAE/D,IADLC,EACI,EADJA,WAEA,OACE,uBAAG/V,MAAO,CAAEI,MAAO2V,EAAWC,MAAQ,MAAQ,UAC3CD,EAAWC,MACRD,EAAWC,MACXD,EAAWE,QACXF,EAAWE,QACX,KC2IK9X,gBAVS,SAACC,GAAD,MAAmB,CACzC8X,mBAAoB9X,EAAM8R,KAAKiG,wBAGN,SAAC5X,GAAD,MAA8B,CACvD6X,gBAAiB,SAACnG,GAChB1R,ECjJW,SAAC0R,GACd,MAAO,CACLnR,KAAMgW,GAA0BuB,aAChCrX,QAASiR,GD8IAqG,CAAqBrG,QAInB9R,EA5HsC,SAAC,GAG/C,IAFLiY,EAEI,EAFJA,gBACAF,EACI,EADJA,mBAEMxO,EAAUlH,KADZ,EAGgCnB,qBAHhC,mBAGGkX,EAHH,KAGeC,EAHf,KAUJ,OACE,kBAAC,GAAD,KACG,IACD,yBAAKzR,UAAW2C,EAAQrE,OACtB,kBAACoT,GAAA,EAAD,CAAQ1R,UAAW2C,EAAQ+N,QACzB,kBAAC9B,GAAA,EAAD,OAEF,kBAACnF,GAAA,EAAD,CAAYtG,UAAU,KAAK/H,QAAQ,MAAnC,WAGA,0BAAM4E,UAAW2C,EAAQkO,KAAMrW,SAfhB,SAACC,GACpBA,EAAEC,iBACF2W,EAAgBG,KAcV,kBAACvF,EAAA,EAAD,CAAM9N,WAAS,EAACP,QAAS,GACvB,kBAACqO,EAAA,EAAD,CAAMtM,MAAI,EAACuM,GAAI,GAAIyF,GAAI,GACrB,kBAAC1R,EAAA,EAAD,CACE7E,QAAQ,WACRwW,UAAQ,EACRtR,WAAS,EACTuR,WAAS,EACTxR,MAAM,aACNvF,SAAU,SAACL,GAAD,OACRgX,EAAc,2BAAKD,GAAN,IAAkBjG,UAAW9Q,EAAEyF,OAAOrF,aAIzD,kBAACoR,EAAA,EAAD,CAAMtM,MAAI,EAACuM,GAAI,GAAIyF,GAAI,GACrB,kBAAC1R,EAAA,EAAD,CACE7E,QAAQ,WACRwW,UAAQ,EACRtR,WAAS,EACTwR,aAAa,QACbzR,MAAM,YACNvF,SAAU,SAACL,GAAD,OACRgX,EAAc,2BAAKD,GAAN,IAAkBO,SAAUtX,EAAEyF,OAAOrF,aAIxD,kBAACoR,EAAA,EAAD,CAAMtM,MAAI,EAACuM,GAAI,IACb,kBAACjM,EAAA,EAAD,CACE7E,QAAQ,WACRwW,UAAQ,EACRtR,WAAS,EACTwR,aAAa,QACbzR,MAAM,gBACNvF,SAAU,SAACL,GAAD,OACRgX,EAAc,2BAAKD,GAAN,IAAkBQ,aAAcvX,EAAEyF,OAAOrF,aAI5D,kBAACoR,EAAA,EAAD,CAAMtM,MAAI,EAACuM,GAAI,IACb,kBAACjM,EAAA,EAAD,CACE7E,QAAQ,WACRwW,UAAQ,EACRtR,WAAS,EACTvG,KAAK,WACL+X,aAAa,mBACbzR,MAAM,WACNvF,SAAU,SAACL,GAAD,OACRgX,EAAc,2BAAKD,GAAN,IAAkBS,SAAUxX,EAAEyF,OAAOrF,aAIxD,kBAACoR,EAAA,EAAD,CAAMtM,MAAI,EAACuM,GAAI,IACb,kBAACzK,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAAU9G,MAAM,mBAAmBQ,MAAM,YAClDgF,MAAM,iFAIZ,kBAAClF,EAAA,EAAD,CACEpB,KAAK,SACLuG,WAAS,EACTlF,QAAQ,YACRC,MAAM,UACN2E,UAAW2C,EAAQmO,QALrB,WASCK,EACC,kBAAC,GAAD,CAAuBH,WAAYG,IAEnC,GAGF,kBAAClF,EAAA,EAAD,CAAM9N,WAAS,EAAC+T,QAAQ,YACtB,kBAACjG,EAAA,EAAD,CAAMtM,MAAI,GACR,kBAACgL,GAAA,EAAD,CACEC,KAAK,IACLxP,QAAQ,QACR+H,UAAWgP,KACXvF,GAAG,WAJL,4CE3GCxT,gBAJS,SAACC,GAAD,MAAmB,CACzC6R,SAAU7R,EAAM8R,KAAKC,iBAGRhS,EAZwC,SAAC,GAGjD,IAFLoQ,EAEI,EAFJA,SAGA,OADI,EADJ0B,SAEckD,IACP,oCAAG5E,GADgB,kBAAC,IAAD,CAAUoD,GAAG,eCgI1BxT,gBATS,SAACC,GAAD,MAAmB,CACzC8X,mBAAoB9X,EAAM8R,KAAKiG,wBAGN,SAAC5X,GAAD,MAA8B,CACvD4Y,aAAc,SAACjH,GAAD,OACZ3R,ECrIW,SAAC2R,GAAD,MAAkC,CAC/CpR,KAAMgW,GAA0BsC,WAChCpY,QAASkR,GDmIEmH,CAAwBnH,QAGtB/R,EA/GgC,SAAC,GAGzC,IAFLgZ,EAEI,EAFJA,aACAjB,EACI,EADJA,mBAEMxO,EAAUlH,KADZ,EAGgCnB,mBAAwB,CAC1D0X,aAAc,2BACdC,SAAU,cALR,mBAGGM,EAHH,KAGeC,EAHf,KAYJ,OACE,kBAAC,GAAD,KACE,yBAAKxS,UAAW2C,EAAQrE,OACtB,kBAACoT,GAAA,EAAD,CAAQ1R,UAAW2C,EAAQ+N,QACzB,kBAAC9B,GAAA,EAAD,OAEF,kBAACnF,GAAA,EAAD,CAAYtG,UAAU,KAAK/H,QAAQ,MAAnC,WAGA,0BACE4E,UAAW2C,EAAQkO,KACnBrW,SAAU,SAACC,GACTA,EAAEC,iBAfV0X,EAAaG,KAmBP,kBAACtS,EAAA,EAAD,CACE7E,QAAQ,WACRoP,OAAO,SACPoH,UAAQ,EACRtR,WAAS,EACT5G,GAAG,QACH2G,MAAM,gBACNmL,KAAK,QACLsG,aAAa,QACbD,WAAS,EACThX,MAAK,OAAE0X,QAAF,IAAEA,OAAF,EAAEA,EAAYP,aACnBlX,SAAU,SAACL,GAAD,OACR+X,EAAc,2BAAKD,GAAN,IAAkBP,aAAcvX,EAAEyF,OAAOrF,YAG1D,kBAACoF,EAAA,EAAD,CACE7E,QAAQ,WACRoP,OAAO,SACPoH,UAAQ,EACRtR,WAAS,EACTkL,KAAK,WACLnL,MAAM,WACNtG,KAAK,WACLL,GAAG,WACHoY,aAAa,mBACbjX,MAAK,OAAE0X,QAAF,IAAEA,OAAF,EAAEA,EAAYN,SACnBnX,SAAU,SAACL,GAAD,OACR+X,EAAc,2BAAKD,GAAN,IAAkBN,SAAUxX,EAAEyF,OAAOrF,YAGtD,kBAAC4G,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAAU9G,MAAM,WAAWQ,MAAM,YAC1CgF,MAAM,gBAER,kBAAClF,EAAA,EAAD,CACEpB,KAAK,SACLuG,WAAS,EACTlF,QAAQ,YACRC,MAAM,UACN2E,UAAW2C,EAAQmO,QALrB,WASCK,EACC,kBAAC,GAAD,CAAuBH,WAAYG,IAEnC,GAEF,kBAAClF,EAAA,EAAD,CAAM9N,WAAS,GACb,kBAAC8N,EAAA,EAAD,CAAMtM,MAAI,EAACuM,IAAE,GACX,kBAACvB,GAAA,EAAD,CAAMC,KAAK,IAAIxP,QAAQ,SAAvB,qBAIF,kBAAC6Q,EAAA,EAAD,CAAMtM,MAAI,GACR,kBAACgL,GAAA,EAAD,CACEC,KAAK,IACLxP,QAAQ,QACR+H,UAAWgP,KACXvF,GAAG,WAEF,0CE/BFxT,gBApBS,SAACC,GAAD,MAAmB,CACzC6R,SAAU7R,EAAM8R,KAAKC,cACrB2D,eAAgB1V,EAAM8R,KAAK4D,mBAGF,SAACvV,GAC1B,MAAO,CACLiZ,WAAY,SAAC1K,GACX,OAAO2E,YAAW,WC9ET,IAACgG,ED+ERlZ,GC/EQkZ,ED+EyB3K,EC/ES,CAChDhO,KAAM/B,EAAgB2a,YACtB1Y,QAASyY,SDgFPE,4BAA6B,SAACxE,GAAD,OAC3B5U,EEnFS,SAAC4U,GACd,MAAO,CACLrU,KAAMgW,GAA0B8C,mBAChC5Y,QAASmU,GFgFE0E,CAA8B1E,KACzC2E,oBAAqB,SAAC5H,GACpB3R,EGjFS,SAAC2R,GAAD,MAAkC,CAC/CpR,KAAMgW,GAA0BiD,WAChC/Y,QAASkR,GH+EI8H,CAA2B9H,QAK3B/R,EAzE4B,SAAC,GAMrC,IALLqZ,EAKI,EALJA,WACAG,EAII,EAJJA,4BACA1H,EAGI,EAHJA,SACA6D,EAEI,EAFJA,eACAgE,EACI,EADJA,oBA6CA,OAPAzK,qBAAU,WAnCJ4C,EAASkD,KACX8B,GAASC,MAAMjF,EAASkD,KAAK8E,GAAG,SAAS,SAACC,GACxC,GAAIA,EAASC,MAAO,CAClB,IAAIrL,EAAsBsL,OAAOC,OAAOH,EAASC,OACjDrL,EAAOA,EAAKwL,MAAK,SAACC,EAAGC,GACnB,OAAID,EAAErZ,YAAcsZ,EAAEtZ,aAAqB,EACvCqZ,EAAErZ,YAAcsZ,EAAEtZ,YAAoB,EACnC,KAETsY,EAAW1K,QAEX0K,EAAW,OAgBjBpC,GAAKqD,oBAAmB,SAACvI,GACvB,OACSyH,EADLzH,EACiCA,EAAKiD,IAEP,OAbjClD,EAASkD,KACXgC,GAAQD,MAAMjF,EAASkD,KAAKuF,KAAK,SAAS,SAACR,GACpCA,EAASC,KACdL,EAAoBI,EAASC,YAoBhC,CAACrE,EAAgB7D,EAASkD,MACtB,QIGMhV,gBAJS,SAACC,GAAD,MAAmB,CACzC0V,eAAgB1V,EAAM8R,KAAK4D,kBAGd3V,EA/CkB,SAAC,GAAwB,IAAtB2V,EAAqB,EAArBA,eAC5BpM,EAAUlH,IADuC,EAG/BnB,oBAAS,GAHsB,mBAGhDwS,EAHgD,KAG1C8G,EAH0C,KAKvD,OACE,yBAAK5T,UAAW2C,EAAQ/G,MACtB,kBAAC,GAAD,MAEA,kBAACiY,GAAA,EAAD,MACA,kBAAC,GAAD,CAAS/G,KAAMA,EAAME,YAAa,kBAAM4G,GAAQ,MAChD,kBAAC,GAAD,CAAY9G,KAAMA,EAAMkC,gBAAiB,kBAAM4E,GAAQ,MAEtD7E,GACC,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE+E,KAAK,QACLC,OAAQ,kBACN,kBAAC,GAAD,KACE,kBAAC,GAAD,UAIN,kBAAC,IAAD,CACED,KAAK,QACLC,OAAQ,kBACN,kBAAC,GAAD,KACE,kBAAC,GAAD,UAIN,kBAAC,IAAD,CAAOD,KAAK,UAAU3Q,UAAW6Q,KACjC,kBAAC,IAAD,CAAOF,KAAK,WAAW3Q,UAAW8Q,KAClC,kBAAC,IAAD,CAAOH,KAAK,UAAU3Q,UAAW+Q,KACjC,kBAAC,IAAD,CAAOJ,KAAK,aAAa3Q,UAAWmJ,KACpC,kBAAC,IAAD,CAAU6H,KAAK,IAAIC,OAAK,EAACxH,GAAG,UAC5B,kBAAC,IAAD,CAAUA,GAAG,mBCjDHsB,QACW,cAA7BmG,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uBCTSC,gBAAgB,CAC7Blb,S7CkCa,WAAiE,IAA5CF,EAA2C,uDAApB,GAAIsH,EAAgB,uCAC7E,OAAQA,EAAO5G,MACb,KAAK/B,EAAgBgC,SACnB,OAAOX,EACT,KAAKrB,EAAgB0c,kBACnB,OAAO,YAAI/T,EAAO1G,SACpB,KAAKjC,EAAgB8I,cAErB,KAAK9I,EAAgBiJ,YAErB,KAAKjJ,EAAgByH,YAErB,QACE,OAAOpG,I6C9CX8R,KhByDa,WAOZ,IAND9R,EAMA,uDANoC,CAClC0V,gBAAgB,EAChBqC,oBAAqB,GACrBhG,cAAe,IAEjBzK,EACA,uCACA,OAAQA,EAAO5G,MACb,KAAKgW,GAA0BuB,aAC7B,OAAO,2BAAKjY,GAAZ,IAAmB+R,cAAezK,EAAO1G,UAC3C,KAAK8V,GAA0B4E,qBAE/B,KAAK5E,GAA0B6E,kBAC7B,OAAO,2BAAKvb,GAAZ,IAAmB+X,oBAAqBzQ,EAAO1G,UACjD,KAAK8V,GAA0BsC,WAC7B,OAAO,2BAAKhZ,GAAZ,IAAmB+R,cAAezK,EAAO1G,UAC3C,KAAK8V,GAA0B8E,mBAE/B,KAAK9E,GAA0B+E,gBAC7B,OAAO,2BAAKzb,GAAZ,IAAmB+X,oBAAqBzQ,EAAO1G,UACjD,KAAK8V,GAA0B8C,mBAC7B,OAAO,2BACFxZ,GADL,IAEE+R,cAAe,CAAEgD,IAAKzN,EAAO1G,SAC7B8U,gBAAgB,IAEpB,KAAKgB,GAA0BiD,WAC7B,OAAO,2BAAK3Z,GAAZ,IAAmB+R,cAAezK,EAAO1G,UAC3C,KAAK8V,GAA0BQ,YAC7B,MAAO,CACLxB,gBAAgB,EAChB3D,cAAe,GACfgG,oBAAqB,IAEzB,QACE,OAAO/X,M,0CiB9FH0b,I,aA+BAC,I,aAgCeC,IA/DzB,SAAUF,GAAqBpU,GAA/B,kFAGqC,OAHrC,EACgDA,EAAO1G,QAA7C+X,EADV,EACUA,aAAczG,EADxB,EACwBA,UAAWwG,EADnC,EACmCA,SADnC,kBAG2C1B,GAAK6E,+BAC1CvU,EAAO1G,QAAQ+X,aACfrR,EAAO1G,QAAQgY,UALrB,qBAGY9G,EAHZ,EAGYA,MAHZ,iBAgBM,OAPAiF,GAAQD,MAAR,UAAiBhF,EAAKiD,MAAO+G,IAAI,CAC/B/G,IAAKjD,EAAKiD,IACV4D,eACAzG,YACAwG,aAbR,UAgBYqD,aAAwB,CAC5Brb,KAAMgW,GAA0B4E,qBAChC1a,QAAS,CACPiX,QAAS,0DAnBnB,gCAwBI,OAxBJ,oCAwBUkE,aAAwB,CAC5Brb,KAAMgW,GAA0B6E,kBAChC3a,QAAS,CAAEgX,MAAO,KAAMoE,WA1B9B,uDA+BA,SAAUL,GAAuBrU,GAAjC,wEAIwB,OAJxB,kBAI8ByO,KACvBiB,OACAiF,2BACC3U,EAAO1G,QAAQ+X,aACfrR,EAAO1G,QAAQgY,UARvB,sBAGM9G,KAHN,gBAaM,OAbN,SAaYiK,aAAwB,CAC5Brb,KAAMgW,GAA0B8E,mBAChC5a,QAAS,CACPiX,QAAS,oBAhBnB,+BAqBI,OArBJ,oCAqBUkE,aAAwB,CAC5Brb,KAAMgW,GAA0B+E,gBAChC7a,QAAS,CACPgX,MAAO,KAAMoE,WAxBrB,uDA8BA,IAAME,GAAa,SAAClc,GAAD,OAAkBA,EAAM8R,KAAKC,cAAcgD,KAE/C,SAAU6G,KAAV,kEACb,OADa,SACPO,aAAUxd,EAAgBgC,SAAjB,WAA2B,WAAW2G,GAAX,0EACnB,OADmB,SACb8U,aAAOF,IADM,OAEf,OADnBG,EADkC,gBAETxF,GAASC,MAAT,UAAkBuF,IAFT,OAIxC,OAFMC,EAFkC,gBAIlCA,EACHxF,MADG,UACMxP,EAAO1G,QAAQP,KACxByb,IAFG,eAEMxU,EAAO1G,UANqB,2CAD7B,OASb,OATa,SASP2b,aAAW5d,EAAgB8I,cAAjB,WAAgC,WAAWH,GAAX,gFAGzB,OAHyB,EACNA,EAAO1G,QAAvCP,EADsC,EACtCA,GAAIQ,EADkC,EAClCA,WAAYE,EADsB,EACtBA,YADsB,SAGnBqb,aAAOF,IAHY,OAIrB,OADnBG,EAHwC,gBAIfxF,GAASC,MAAT,UAAkBuF,IAJH,cAM7BvF,MAAjB,UAA0BzW,IAAMmc,OAAO,CAAE3b,aAAYE,gBANP,2CATnC,OAiBb,OAjBa,SAiBPwb,aAAW5d,EAAgByH,YAAjB,WAA8B,WAAWkB,GAAX,gFAGvB,OAHuB,EACNA,EAAO1G,QAArCP,EADoC,EACpCA,GAAIC,EADgC,EAChCA,SAAUS,EADsB,EACtBA,YADsB,SAGjBqb,aAAOF,IAHU,OAInB,OADnBG,EAHsC,gBAIbxF,GAASC,MAAT,UAAkBuF,IAJL,cAM3BvF,MAAjB,UAA0BzW,IAAMmc,OAAO,CAAElc,WAAUS,gBANP,2CAjBjC,OAyBb,OAzBa,SAyBPob,aAAUxd,EAAgBiJ,YAAjB,WAA8B,WAAWN,GAAX,0EAGtB,OAFfjH,EAAKiH,EAAO1G,QADyB,SAGhBwb,aAAOF,IAHS,OAIlB,OADnBG,EAHqC,gBAIZxF,GAASC,MAAT,UAAkBuF,IAJN,cAM1BvF,MAAjB,UAA0BzW,IAAMoc,SANW,2CAzBhC,OAmCb,OAnCa,UAmCPF,aACJ7F,GAA0BuB,aAC1ByD,IArCW,QAuCb,OAvCa,UAuCPa,aACJ7F,GAA0BsC,WAC1B2C,IAzCW,yC,iBCrELe,I,aAOAC,I,aAIeC,IAXzB,SAAUF,GAA0BpV,GAApC,kEACE,OADF,SACQyU,aAAY,CAChBrb,KAAM/B,EAAgB0c,kBACtBza,QAAS0G,EAAO1G,UAHpB,wCAOA,SAAU+b,KAAV,kEACE,OADF,SACQJ,aAAW5d,EAAgB2a,YAAaoD,IADhD,wCAIe,SAAUE,KAAV,kEACb,OADa,SACPC,aAAI,CAACF,KAA2Bf,OADzB,wCCTf,IAAMkB,GAAiBC,eAERC,gBAAYC,GAASC,aAAgBJ,KAEpDA,GAAeK,IAAIP,ICDnBQ,IAAS1C,OACP,kBAAC,IAAM2C,SAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,IACf,kBAAC,KAAD,KACE,kBAAC,GAAD,SAINC,SAASC,eAAe,SL0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnG,GACLjD,QAAQiD,MAAMA,EAAMoE,c","file":"static/js/main.5d0ca207.chunk.js","sourcesContent":["export enum TodoActionTypes {\r\n  ADD_TASK = \"ADD_TASK\",\r\n  ADD_FETCHED_TASKS = \"ADD_TASKS\",\r\n  UPDATE_TASK = \"UPDATE_TASK\",\r\n  COMPLETE_TASK = \"COMPLETE_TASK\",\r\n  DELETE_TASK = \"DELETE_TASK\",\r\n  FETCH_TASKS = \"FETCH_TASKS\",\r\n  FIREBASE_FETCHED_TASK = \"FIREBASE_FETCHED_TASK\",\r\n}\r\n\r\nexport interface ListReducer {\r\n  id: number;\r\n  taskName: string;\r\n  isComplete: boolean;\r\n  updatedTime: string;\r\n  createdDate: string;\r\n}\r\n\r\nexport type Action =\r\n  | {\r\n      type: TodoActionTypes.ADD_TASK;\r\n      payload: ListReducer;\r\n    }\r\n  | {\r\n      type: TodoActionTypes.FETCH_TASKS;\r\n      payload: ListReducer[];\r\n    }\r\n  | {\r\n      type: TodoActionTypes.UPDATE_TASK;\r\n      payload: { id: number; taskName: string; updatedTime: string };\r\n    }\r\n  | {\r\n      type: TodoActionTypes.COMPLETE_TASK;\r\n      payload: { id: number; isComplete: boolean; updatedTime: string };\r\n    }\r\n  | {\r\n      type: TodoActionTypes.ADD_FETCHED_TASKS;\r\n      payload: ListReducer[];\r\n    }\r\n  | {\r\n      type: TodoActionTypes.DELETE_TASK;\r\n      payload: number;\r\n    };\r\n\r\nexport default function listReducer(state: ListReducer[] = [], action: Action) {\r\n  switch (action.type) {\r\n    case TodoActionTypes.ADD_TASK:\r\n      return state;\r\n    case TodoActionTypes.ADD_FETCHED_TASKS:\r\n      return [...action.payload];\r\n    case TodoActionTypes.COMPLETE_TASK:\r\n      return state;\r\n    case TodoActionTypes.DELETE_TASK:\r\n      return state;\r\n    case TodoActionTypes.UPDATE_TASK:\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { TodoActionTypes, Action } from \"../reducers/list\";\r\n\r\nexport default (\r\n  id: number,\r\n  itemName: string,\r\n  currentTime: string,\r\n  currentDate: string\r\n): Action => {\r\n  return {\r\n    type: TodoActionTypes.ADD_TASK,\r\n    payload: {\r\n      id,\r\n      taskName: itemName,\r\n      isComplete: false,\r\n      createdDate: currentDate,\r\n      updatedTime: currentTime,\r\n    },\r\n  };\r\n};\r\n","//Get Current time  h/m/s\r\nexport const getCurrentTimeInString = (): string => {\r\n  const today = new Date();\r\n\r\n  const h = String(today.getHours()).padStart(2, \"0\");\r\n  const m = String(today.getMinutes()).padStart(2, \"0\");\r\n  const s = String(today.getSeconds()).padStart(2, \"0\");\r\n\r\n  return `${h}:${m}:${s}`;\r\n};\r\n\r\n//Get Current dd/mm/yyyy\r\nexport const getCurrentDateInString = (): string => {\r\n  const today = new Date();\r\n\r\n  const dd = String(today.getDate()).padStart(2, \"0\");\r\n  const mm = String(today.getMonth() + 1).padStart(2, \"0\");\r\n  const yyyy = today.getFullYear();\r\n\r\n  return `${dd}/${mm}/${yyyy}`;\r\n};\r\n\r\n// Greeting\r\nenum Greeting {\r\n  GOOD_MORNING = \"Good morning\",\r\n  LUNCH_TIME = \"Let's have a lunch time\",\r\n  GOOD_AFTERNOON = \"Good afternoon\",\r\n  GOOD_EVENING = \"Good evening\",\r\n  GOOD_NIGHT = \"Good night, time to sleep\",\r\n}\r\n\r\nexport const getGreetingSentence = (name: string): string => {\r\n  const hr = new Date().getHours();\r\n  let greeting = \"\";\r\n\r\n  switch (true) {\r\n    case hr <= 10:\r\n      greeting = Greeting.GOOD_MORNING;\r\n      break;\r\n    case hr === 12:\r\n      greeting = Greeting.LUNCH_TIME;\r\n      break;\r\n    case hr <= 14:\r\n      greeting = Greeting.GOOD_AFTERNOON;\r\n      break;\r\n    case hr <= 20:\r\n      greeting = Greeting.GOOD_EVENING;\r\n      break;\r\n    default:\r\n      greeting = Greeting.GOOD_NIGHT;\r\n      break;\r\n  }\r\n  return `${greeting} ${name}!`;\r\n};\r\n","import React, { useState, Dispatch } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\n//Component\r\nimport listActionCreators from \"../actionCreators/listActionCreator\";\r\nimport { Store } from \"../reducers\";\r\nimport { ListReducer } from \"../reducers/list\";\r\nimport { getCurrentTimeInString, getCurrentDateInString } from \"./utils\";\r\n\r\n//Material UI\r\nimport { Button, Input } from \"@material-ui/core\";\r\n\r\ntype Props = {\r\n  addNewTask: (\r\n    id: number,\r\n    taskName: string,\r\n    currentTime: string,\r\n    currentDate: string\r\n  ) => void;\r\n  list: ListReducer[];\r\n};\r\n\r\nconst TodoSubmitForm: React.FC<Props> = ({ addNewTask }) => {\r\n  const [taskName, setTaskName] = useState(\"\");\r\n\r\n  const addTask = () => {\r\n    if (taskName) {\r\n      addNewTask(\r\n        Date.now(),\r\n        taskName,\r\n        getCurrentTimeInString(),\r\n        getCurrentDateInString()\r\n      );\r\n      setTaskName(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        addTask();\r\n      }}\r\n    >\r\n      <Input\r\n        value={taskName}\r\n        onChange={(e) => {\r\n          setTaskName(e.currentTarget.value);\r\n        }}\r\n        placeholder=\"Insert your new task here\"\r\n        style={{ width: \"80%\" }}\r\n      />\r\n      <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n        Submit Task\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\n//\r\nconst mapStateToProps = (state: Store) => {\r\n  return { list: state.todoList };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\r\n  addNewTask: (\r\n    id: number,\r\n    taskName: string,\r\n    currentTime: string,\r\n    currentDate: string\r\n  ) => dispatch(listActionCreators(id, taskName, currentTime, currentDate)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoSubmitForm);\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled/macro\";\r\n\r\nexport interface TooltipProps {}\r\n\r\nconst Span = styled.span`\r\n  visibility: hidden;\r\n  width: 200px;\r\n  background-color: black;\r\n  color: #fff;\r\n  text-align: center;\r\n  border-radius: 6px;\r\n  padding: 5px 0;\r\n\r\n  /* Position the tooltip */\r\n  position: absolute;\r\n  z-index: 1;\r\n`;\r\n\r\nconst STooltip = styled.div`\r\n  position: relative;\r\n  display: inline-block;\r\n  padding-top: 0.5rem;\r\n  padding-bottom: 0.5rem;\r\n\r\n  :hover {\r\n    ${Span} {\r\n      visibility: visible;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Tooltip: React.SFC<TooltipProps> = () => {\r\n  return (\r\n    <>\r\n      <STooltip>\r\n        Show Tips\r\n        <Span>\r\n          Tips: Double click on <b>Task Name</b> to modify the task\r\n        </Span>\r\n      </STooltip>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Tooltip;\r\n","import { makeStyles, Theme } from \"@material-ui/core\";\r\n\r\nexport const drawerWidth = 240;\r\nexport const fixedHeight = 400;\r\n\r\nconst useStyled = makeStyles((theme: Theme) => {\r\n  return {\r\n    root: {\r\n      display: \"flex\",\r\n    },\r\n    toolbar: {\r\n      paddingRight: 24,\r\n    },\r\n    toolbarIcon: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"flex-end\",\r\n      padding: \"0 8px\",\r\n      ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      transition: theme.transitions.create([\"width\", \"margin\"], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    appBarShift: {\r\n      marginLeft: drawerWidth,\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      transition: theme.transitions.create([\"width\", \"margin\"], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    menuButton: {\r\n      marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n      display: \"none\",\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n      position: \"relative\",\r\n      whiteSpace: \"nowrap\",\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create(\"width\", {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    drawerPaperClose: {\r\n      overflowX: \"hidden\",\r\n      transition: theme.transitions.create(\"width\", {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      width: theme.spacing(7),\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        width: theme.spacing(9),\r\n      },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n      height: \"100vh\",\r\n      flexGrow: 1,\r\n      // marginLeft: \"10rem\",\r\n      overflow: \"auto\",\r\n    },\r\n    container: {\r\n      paddingTop: theme.spacing(2),\r\n      paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      display: \"flex\",\r\n      overflow: \"auto\",\r\n      flexDirection: \"column\",\r\n    },\r\n    fixedHeight: {\r\n      height: fixedHeight,\r\n    },\r\n    TodoTable: {\r\n      minWidth: 700,\r\n    },\r\n  };\r\n});\r\n\r\nexport default useStyled;\r\n","import React from \"react\";\r\nimport {\r\n  TableHead,\r\n  withStyles,\r\n  Theme,\r\n  TableCell,\r\n  TableRow,\r\n} from \"@material-ui/core\";\r\n\r\nexport interface TodoListTableHeaderProps {}\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n}))(TableCell);\r\n\r\nconst TodoListTableHeader: React.SFC<TodoListTableHeaderProps> = () => {\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <StyledTableCell style={{ width: \"40%\" }}>Task Name</StyledTableCell>\r\n        <StyledTableCell style={{ width: \"20%\" }}>Created Date</StyledTableCell>\r\n        <StyledTableCell style={{ width: \"20%\" }}>\r\n          Complete Status\r\n        </StyledTableCell>\r\n        <StyledTableCell style={{ width: \"20%\" }}>Delete Task</StyledTableCell>\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n};\r\n\r\nexport default TodoListTableHeader;\r\n","import React, { useState, Dispatch } from \"react\";\r\n\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { ListReducer } from \"../../reducers/list\";\r\nimport { getCurrentTimeInString } from \"../utils\";\r\n\r\nimport updateTaskActionCreator from \"../../actionCreators/updateTaskActionCreator\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport interface ModifyTaskProps {\r\n  item: ListReducer;\r\n\r\n  updateTask: (id: number, taskName: string, updatedTime: string) => void;\r\n  toggleModify: () => void;\r\n}\r\n\r\nconst ModifyTask: React.SFC<ModifyTaskProps> = ({\r\n  item,\r\n  updateTask,\r\n  toggleModify,\r\n}) => {\r\n  const [newTaskName, setNewTaskName] = useState(item.taskName);\r\n  const handleEnterOnInput = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Enter\") {\r\n      handleUpdateTask(item.id);\r\n    }\r\n  };\r\n\r\n  const handleUpdateTask = (id: number) => {\r\n    updateTask(id, newTaskName, getCurrentTimeInString());\r\n    toggleModify();\r\n  };\r\n\r\n  return (\r\n    <div className=\"item-task-modify\">\r\n      <TextField\r\n        value={newTaskName}\r\n        onChange={(e) => setNewTaskName(e.target.value)}\r\n        onKeyPress={handleEnterOnInput}\r\n        label=\"Changed Task\"\r\n        fullWidth={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\r\n  updateTask: (id: number, taskName: string, updatedTime: string) =>\r\n    dispatch(updateTaskActionCreator(id, taskName, updatedTime)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ModifyTask);\r\n","import Chart from \"chart.js\";\r\n\r\ndeclare global {\r\n  namespace Chart {\r\n    interface ChartOptions {\r\n      center?: {\r\n        text: string;\r\n        color?: string;\r\n        fontStyle?: string;\r\n        sidePadding?: number;\r\n        minFontSize?: number;\r\n        lineHeight?: number;\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport enum ChartType {\r\n  LINE = \"line\",\r\n  BAR = \"bar\",\r\n  HORIZONTALBAR = \"horizontalBar\",\r\n  RADAR = \"radar\",\r\n  DOUGHNUT = \"doughnut\",\r\n  POLARAREA = \"polarArea\",\r\n  BUBBLE = \"bubble\",\r\n  PIE = \"pie\",\r\n  SCATTER = \"scatter\",\r\n}\r\n\r\ninterface CenterOptions {\r\n  text: string;\r\n  color?: string;\r\n  fontStyle?: string;\r\n  sidePadding?: number;\r\n  minFontSize?: number;\r\n  lineHeight?: number;\r\n}\r\n\r\nexport const doughnutChartText = ({\r\n  text,\r\n  color = \"#FF6384\",\r\n  fontStyle = \"Arial\",\r\n  sidePadding = 20,\r\n  minFontSize = 25,\r\n  lineHeight = 25,\r\n}: CenterOptions): CenterOptions => {\r\n  Chart.pluginService.register({\r\n    beforeDraw: function (chart: any) {\r\n      if (chart.config.options?.center) {\r\n        // Get ctx from string\r\n        var ctx = chart.chart.ctx;\r\n\r\n        // Get options from the center object in options\r\n        var centerConfig = chart.config.options.center;\r\n        var fontStyle = centerConfig.fontStyle || \"Arial\";\r\n        var txt = centerConfig.text;\r\n        var color = centerConfig.color || \"#000\";\r\n        var maxFontSize = centerConfig.maxFontSize || 75;\r\n        var sidePadding = centerConfig.sidePadding || 20;\r\n        var sidePaddingCalculated =\r\n          (sidePadding / 100) * (chart.innerRadius * 2);\r\n        // Start with a base font of 30px\r\n        ctx.font = \"30px \" + fontStyle;\r\n\r\n        // Get the width of the string and also the width of the element minus 10 to give it 5px side padding\r\n        var stringWidth = ctx.measureText(txt).width;\r\n        var elementWidth = chart.innerRadius * 2 - sidePaddingCalculated;\r\n\r\n        // Find out how much the font can grow in width.\r\n        var widthRatio = elementWidth / stringWidth;\r\n        var newFontSize = Math.floor(30 * widthRatio);\r\n        var elementHeight = chart.innerRadius * 2;\r\n\r\n        // Pick a new font size so it will not be larger than the height of label.\r\n        var fontSizeToUse = Math.min(newFontSize, elementHeight, maxFontSize);\r\n        var minFontSize = centerConfig.minFontSize;\r\n        var lineHeight = centerConfig.lineHeight || 25;\r\n        var wrapText = false;\r\n\r\n        if (minFontSize === undefined) {\r\n          minFontSize = 20;\r\n        }\r\n\r\n        if (minFontSize && fontSizeToUse < minFontSize) {\r\n          fontSizeToUse = minFontSize;\r\n          wrapText = true;\r\n        }\r\n\r\n        // Set font settings to draw it correctly.\r\n        ctx.textAlign = \"center\";\r\n        ctx.textBaseline = \"middle\";\r\n        var centerX = (chart.chartArea.left + chart.chartArea.right) / 2;\r\n        var centerY = (chart.chartArea.top + chart.chartArea.bottom) / 2;\r\n        ctx.font = fontSizeToUse + \"px \" + fontStyle;\r\n        ctx.fillStyle = color;\r\n\r\n        if (!wrapText) {\r\n          ctx.fillText(txt, centerX, centerY);\r\n          return;\r\n        }\r\n\r\n        var words = txt.split(\" \");\r\n        var line = \"\";\r\n        var lines = [];\r\n\r\n        // Break words up into multiple lines if necessary\r\n        for (var n = 0; n < words.length; n++) {\r\n          var testLine = line + words[n] + \" \";\r\n          var metrics = ctx.measureText(testLine);\r\n          var testWidth = metrics.width;\r\n          if (testWidth > elementWidth && n > 0) {\r\n            lines.push(line);\r\n            line = words[n] + \" \";\r\n          } else {\r\n            line = testLine;\r\n          }\r\n        }\r\n\r\n        // Move the center up depending on line height and number of lines\r\n        centerY -= (lines.length / 2) * lineHeight;\r\n\r\n        for (var n = 0; n < lines.length; n++) {\r\n          ctx.fillText(lines[n], centerX, centerY);\r\n          centerY += lineHeight;\r\n        }\r\n        //Draw text in center\r\n        ctx.fillText(line, centerX, centerY);\r\n      }\r\n    },\r\n  });\r\n\r\n  return {\r\n    text,\r\n    color,\r\n    fontStyle,\r\n    sidePadding,\r\n    minFontSize,\r\n    lineHeight,\r\n  };\r\n};\r\n","import { Action, TodoActionTypes } from \"../reducers/list\";\r\n\r\nexport default function updateTaskActionCreator(\r\n  id: number,\r\n  taskName: string,\r\n  updatedTime: string\r\n): Action {\r\n  return {\r\n    type: TodoActionTypes.UPDATE_TASK,\r\n    payload: {\r\n      id,\r\n      taskName,\r\n      updatedTime,\r\n    },\r\n  };\r\n}\r\n","import React, { useState, Dispatch } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { ListReducer } from \"../../reducers/list\";\r\nimport toggleCompleteActionCreator from \"../../actionCreators/toggleCompleteActionCreator\";\r\nimport deleteTaskActionCreator from \"../../actionCreators/deleteTaskActionCreator\";\r\nimport { Store } from \"../../reducers\";\r\nimport ModifyTask from \"./ModifyTask\";\r\n\r\nimport { getCurrentTimeInString } from \"../utils\";\r\nimport {\r\n  TableRow,\r\n  TableCell,\r\n  Button,\r\n  withStyles,\r\n  Theme,\r\n  createStyles,\r\n  Tooltip,\r\n  FormControl,\r\n  Checkbox,\r\n  FormControlLabel,\r\n} from \"@material-ui/core\";\r\nimport { Favorite, FavoriteBorder } from \"@material-ui/icons\";\r\n\r\nexport interface TaskProps {\r\n  item: ListReducer;\r\n  setComplete: (id: number, isComplete: boolean, updatedTime: string) => void;\r\n  deleteTask: (id: number) => void;\r\n}\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) => ({\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  })\r\n)(TableRow);\r\n\r\nconst Task: React.SFC<TaskProps> = ({ deleteTask, setComplete, item }) => {\r\n  const [isModified, setIsModified] = useState(false);\r\n\r\n  const handleDelete = (id: number) => {\r\n    deleteTask(id);\r\n  };\r\n\r\n  const toggleComplete = (id: number, isComplete: boolean) => {\r\n    setComplete(id, isComplete, getCurrentTimeInString());\r\n  };\r\n\r\n  const toggleModifyOff = () => {\r\n    setIsModified(false);\r\n  };\r\n\r\n  const toggleModifyOn = () => {\r\n    setIsModified(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StyledTableRow>\r\n        <StyledTableCell\r\n          onDoubleClick={toggleModifyOn}\r\n          style={{ cursor: \"pointer\", padding: \"0.5rem\" }}\r\n        >\r\n          {isModified ? (\r\n            <ModifyTask item={item} toggleModify={toggleModifyOff} />\r\n          ) : (\r\n            <Tooltip title=\"Updated Task\" placement=\"bottom-start\">\r\n              <div>{item.taskName}</div>\r\n            </Tooltip>\r\n          )}\r\n        </StyledTableCell>\r\n        <StyledTableCell>{item.createdDate}</StyledTableCell>\r\n        <StyledTableCell>\r\n          <FormControl>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={item.isComplete}\r\n                  onChange={() => toggleComplete(item.id, !item.isComplete)}\r\n                  icon={<FavoriteBorder />}\r\n                  checkedIcon={<Favorite />}\r\n                />\r\n              }\r\n              label={item.isComplete ? \"YEPPP :)\" : \"NAHH :(\"}\r\n            ></FormControlLabel>\r\n          </FormControl>\r\n          {/* <CheckBox\r\n            item={item}\r\n            toggleComplete={() => toggleComplete(item.id, !item.isComplete)}\r\n          /> */}\r\n        </StyledTableCell>\r\n        <StyledTableCell>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={() => handleDelete(item.id)}\r\n          >\r\n            Delete Task\r\n          </Button>\r\n        </StyledTableCell>\r\n      </StyledTableRow>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: Store) => {\r\n  return {\r\n    list: state.todoList,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => {\r\n  return {\r\n    setComplete: (id: number, isComplete: boolean, updatedTime: string) =>\r\n      dispatch(toggleCompleteActionCreator(id, isComplete, updatedTime)),\r\n    deleteTask: (id: number) => dispatch(deleteTaskActionCreator(id)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Task);\r\n","import { TodoActionTypes, Action } from \"../reducers/list\";\r\n\r\nexport default (\r\n  id: number,\r\n  isComplete: boolean,\r\n  updatedTime: string\r\n): Action => {\r\n  return {\r\n    type: TodoActionTypes.COMPLETE_TASK,\r\n    payload: {\r\n      id,\r\n      isComplete,\r\n      updatedTime,\r\n    },\r\n  };\r\n};\r\n","import { TodoActionTypes, Action } from \"../reducers/list\";\r\n\r\nexport default function deleteTaskActionCreator(id: number): Action {\r\n  return {\r\n    type: TodoActionTypes.DELETE_TASK,\r\n    payload: id,\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport { TableBody } from \"@material-ui/core\";\r\nimport { ListReducer } from \"../../reducers/list\";\r\nimport TodoTaskFromTable from \"./TodoTaskFromTable\";\r\n\r\nexport interface TodoListTableBodyProps {\r\n  page: number;\r\n  rowsPerPage: number;\r\n  todoList: ListReducer[];\r\n}\r\n\r\nconst TodoListTableBody: React.SFC<TodoListTableBodyProps> = ({\r\n  page,\r\n  rowsPerPage,\r\n  todoList,\r\n}) => {\r\n  return (\r\n    <TableBody>\r\n      {todoList\r\n        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n        .map((item) => (\r\n          <TodoTaskFromTable item={item} key={item.id} />\r\n        ))}\r\n    </TableBody>\r\n  );\r\n};\r\n\r\nexport default TodoListTableBody;\r\n","import React, { useState, ChangeEvent } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { ListReducer } from \"../../reducers/list\";\r\nimport { Store } from \"../../reducers\";\r\nimport Tooltip from \"../Tooltip\";\r\n\r\nimport { Table, TableContainer, TablePagination } from \"@material-ui/core\";\r\nimport useStyled from \"../styles/GeneralStyled\";\r\nimport TodoListTableHeader from \"./TodoListTableHeader\";\r\nimport TodoListTableBody from \"./TodoListTableBody\";\r\n\r\nexport interface TodoListTableProps {\r\n  list: ListReducer[];\r\n}\r\n\r\nconst TodoListTable: React.FunctionComponent<TodoListTableProps> = ({\r\n  list,\r\n}) => {\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const classes = useStyled();\r\n\r\n  const handleChangePage = (_: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n  const handleChangeRowsPerPage = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(+e.target.value);\r\n    setPage(0);\r\n  };\r\n  return (\r\n    <>\r\n      <Tooltip />\r\n      <p>\r\n        {list.length === 0\r\n          ? \"I can't find any task :(\"\r\n          : `I got ${list.length} task${list.length > 1 ? \"s\" : \"\"}  `}\r\n      </p>\r\n      <TableContainer style={{ maxHeight: 440 }} className=\"Todo-list-table\">\r\n        <Table className={classes.TodoTable} stickyHeader>\r\n          <TodoListTableHeader />\r\n          <TodoListTableBody\r\n            page={page}\r\n            rowsPerPage={rowsPerPage}\r\n            todoList={list}\r\n          />\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 50, 75, 100]}\r\n        component=\"div\"\r\n        count={list.length}\r\n        rowsPerPage={rowsPerPage}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        page={page}\r\n      ></TablePagination>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: Store) => {\r\n  return {\r\n    list: state.todoList,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TodoListTable);\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { Chart, ChartDataSets, ChartOptions } from \"chart.js\";\r\nimport { Store } from \"../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { ListReducer } from \"../reducers/list\";\r\nimport { ChartType } from \"./utils/ChartJsPlugins\";\r\n\r\nenum DefaultChartValue {\r\n  DEFAULT_TASK_NUMBER = 1,\r\n  DEFAULT_COMPLETE_TASK_NUMBER = 0,\r\n  DEFAULT_COMPLETED_TASK_NUMBER = 1,\r\n}\r\n\r\ninterface ChartData {\r\n  date: string;\r\n  taskNumber: number;\r\n  completedTaskNumber: number;\r\n}\r\n\r\nexport interface RenderTodoChartProps {\r\n  todoList: ListReducer[];\r\n}\r\n\r\nconst RenderTodoChart: React.SFC<RenderTodoChartProps> = ({ todoList }) => {\r\n  const canvasEl = useRef<HTMLCanvasElement>(null);\r\n\r\n  const mapTodoToChartData = (todo: ListReducer): ChartData => ({\r\n    date: todo.createdDate,\r\n    completedTaskNumber: todo.isComplete\r\n      ? DefaultChartValue.DEFAULT_COMPLETED_TASK_NUMBER\r\n      : DefaultChartValue.DEFAULT_COMPLETE_TASK_NUMBER,\r\n    taskNumber: DefaultChartValue.DEFAULT_TASK_NUMBER,\r\n  });\r\n\r\n  const getChartData = todoList.reduce((result: ChartData[], aTodo) => {\r\n    const currentTask = result.find((todo) => todo.date === aTodo.createdDate);\r\n\r\n    const taskComplete = aTodo.isComplete === true;\r\n\r\n    if (currentTask) {\r\n      currentTask.taskNumber++;\r\n\r\n      if (taskComplete) {\r\n        currentTask.completedTaskNumber++;\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    return [...result, mapTodoToChartData(aTodo)];\r\n  }, []);\r\n\r\n  const getLabelsData = (chartData: ChartData[]): string[] => {\r\n    return chartData.map((data) => data.date.slice(0, 5));\r\n  };\r\n\r\n  const renderCreatedTasks = (chartData: ChartData[]): ChartDataSets => {\r\n    return {\r\n      data: chartData.map((data) => data.taskNumber),\r\n      label: \"Created Tasks\",\r\n      borderColor: \"rgba(255, 99, 132, 1)\",\r\n      backgroundColor: \"rgba(255, 99, 132, 0.2)\",\r\n      fill: true,\r\n      borderWidth: 2,\r\n    };\r\n  };\r\n\r\n  const renderCompletedTasks = (chartData: ChartData[]): ChartDataSets => {\r\n    return {\r\n      data: chartData.map((data) => data.completedTaskNumber),\r\n      label: \"Completed Tasks\",\r\n      borderColor: \"rgba(54, 162, 235, 1)\",\r\n      backgroundColor: \"rgba(54, 162, 235, 0.2)\",\r\n      fill: true,\r\n      borderWidth: 2,\r\n    };\r\n  };\r\n\r\n  const getDatasetsData = (chartData: ChartData[]): ChartDataSets[] => {\r\n    return [renderCreatedTasks(chartData), renderCompletedTasks(chartData)];\r\n  };\r\n\r\n  const getOptionsData = (): ChartOptions => {\r\n    return {\r\n      scales: {\r\n        yAxes: [\r\n          {\r\n            ticks: {\r\n              beginAtZero: true,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n    };\r\n  };\r\n  // const renderChartFromData = (ctx: CanvasRenderingContext2D) => {\r\n\r\n  // };\r\n\r\n  const renderChart = () => {\r\n    if (canvasEl?.current && todoList.length) {\r\n      const ctx = canvasEl.current.getContext(\"2d\");\r\n\r\n      const chartData: ChartData[] = getChartData;\r\n\r\n      if (ctx) {\r\n        ctx.canvas.height = 300;\r\n\r\n        return new Chart(ctx, {\r\n          type: ChartType.LINE,\r\n          data: {\r\n            labels: getLabelsData(chartData),\r\n            datasets: getDatasetsData(chartData),\r\n          },\r\n          options: getOptionsData(),\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const statisticChart = renderChart();\r\n\r\n    return () => {\r\n      statisticChart?.destroy();\r\n    };\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [getChartData]);\r\n\r\n  return (\r\n    <div className=\"Line-chart\">\r\n      {todoList.length > 0 ? (\r\n        <div>\r\n          <canvas ref={canvasEl}></canvas>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: Store) => {\r\n  return {\r\n    todoList: state.todoList,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(RenderTodoChart);\r\n\r\n//Using React memo\r\n// export default connect(mapStateToProps)(\r\n//   React.memo(RenderChart, (prevProps: ChartProps, nextProps: ChartProps) => {\r\n//     const { todoList: prevTotoList } = prevProps;\r\n//     const { todoList: nextTotoList } = nextProps;\r\n\r\n//     for (const key in prevTotoList) {\r\n//       if (\r\n//         prevTotoList.hasOwnProperty(key) &&\r\n//         nextTotoList.hasOwnProperty(key)\r\n//       ) {\r\n//         const {\r\n//           taskName: prevTaskName,\r\n//           updatedTime: prevUpdatedTime,\r\n//           ...prevRest\r\n//         } = prevTotoList[key];\r\n//         const {\r\n//           taskName: nextTaskName,\r\n//           updatedTime: nextUpdatedTime,\r\n//           ...nextRest\r\n//         } = nextTotoList[key];\r\n\r\n//         return JSON.stringify(prevRest) === JSON.stringify(nextRest);\r\n//       }\r\n//     }\r\n//     return false;\r\n//   })\r\n// );\r\n","import React from \"react\";\r\n\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nconst Title: React.SFC = ({ children }) => {\r\n  return (\r\n    <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n      {children}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import React, { useRef, useEffect } from \"react\";\r\n\r\nimport Chart, { ChartDataSets, ChartData } from \"chart.js\";\r\nimport { doughnutChartText, ChartType } from \"./utils/ChartJsPlugins\";\r\nimport { Store } from \"../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { ListReducer } from \"../reducers/list\";\r\nimport { getCurrentDateInString } from \"./utils\";\r\nimport { Divider } from \"@material-ui/core\";\r\n\r\nexport interface ProgressTaskProps {\r\n  todoList: ListReducer[];\r\n}\r\n\r\nconst ProgressTask: React.SFC<ProgressTaskProps> = ({ todoList }) => {\r\n  let canvasEl = useRef<HTMLCanvasElement>(null);\r\n\r\n  const labels = [\"Completed Tasks\", \"Remaining Tasks\"];\r\n\r\n  const todayTask = todoList.filter(\r\n    (aTodo) => aTodo.createdDate === getCurrentDateInString()\r\n  ).length;\r\n\r\n  const completedTasks = todoList.filter(\r\n    (aTodo) =>\r\n      aTodo.createdDate === getCurrentDateInString() &&\r\n      aTodo.isComplete === true\r\n  ).length;\r\n\r\n  const remainingTasks =\r\n    todoList.filter((aTodo) => aTodo.createdDate === getCurrentDateInString())\r\n      .length - completedTasks;\r\n\r\n  const renderChart = () => {\r\n    const ctx = canvasEl.current?.getContext(\"2d\");\r\n\r\n    const getTaskProgressPercent = () => {\r\n      return todoList.length\r\n        ? `${((completedTasks / todayTask) * 100).toFixed(2)}%`\r\n        : \"\";\r\n    };\r\n\r\n    const getTaskProgressColor = (): string => {\r\n      const taskProgressPercentString = getTaskProgressPercent();\r\n\r\n      const taskProgressPercent = +taskProgressPercentString.substring(\r\n        0,\r\n        taskProgressPercentString.length - 1\r\n      );\r\n\r\n      switch (true) {\r\n        case taskProgressPercent === 100:\r\n          return \"rgba(75, 192, 192, 1)\";\r\n        case taskProgressPercent >= 80:\r\n          return \"rgba(54, 162, 235, 1)\";\r\n        case taskProgressPercent >= 50:\r\n          return \"rgba(255, 206, 86, 1)\";\r\n        default:\r\n          return \"rgba(255, 99, 132, 1)\";\r\n      }\r\n    };\r\n\r\n    const datasets: ChartDataSets[] = [\r\n      {\r\n        data: [completedTasks, remainingTasks],\r\n        backgroundColor: [getTaskProgressColor(), \"rgba(0, 0, 0, 0.3)\"],\r\n      },\r\n    ];\r\n\r\n    const getDataChart = (): ChartData => ({\r\n      labels,\r\n      datasets,\r\n    });\r\n\r\n    if (todayTask)\r\n      return new Chart(ctx!, {\r\n        type: ChartType.DOUGHNUT,\r\n        data: getDataChart(),\r\n        options: {\r\n          center: doughnutChartText({\r\n            text: getTaskProgressPercent(),\r\n            minFontSize: 15,\r\n          }),\r\n        },\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const progressChart = renderChart();\r\n\r\n    return () => {\r\n      if (todayTask) progressChart!.destroy();\r\n    };\r\n  }, [completedTasks, remainingTasks]);\r\n\r\n  return (\r\n    <div className=\"Progress Chart\" style={{ width: \"100%\", height: \"100%\" }}>\r\n      {todayTask > 0 ? (\r\n        <>\r\n          {\" \"}\r\n          <canvas ref={canvasEl}></canvas>\r\n          <Divider style={{ margin: \"1rem 0rem\" }} variant=\"fullWidth\" />\r\n          <div style={{ textAlign: \"center\" }}>\r\n            {remainingTasks === 0\r\n              ? `Great Work :). No more task today. Time to get a bong and chill :D`\r\n              : `You have ${remainingTasks} tasks to do :), keep working`}\r\n          </div>\r\n        </>\r\n      ) : (\r\n        \"Oops, sounds like you haven't created any tasks today :(\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ todoList }: Store) => {\r\n  return {\r\n    todoList,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ProgressTask);\r\n","import React from \"react\";\r\nimport { Typography, Link } from \"@material-ui/core\";\r\n\r\nexport interface CopyrightProps {}\r\n\r\nconst Copyright: React.SFC<CopyrightProps> = () => {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"From © \"}\r\n      <Link color=\"inherit\" href=\"https://maxphuongle.com/\">\r\n        ＼(≧▽≦)／\r\n      </Link>\r\n      {\"With Yuuki <3\"}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default Copyright;\r\n","import React from \"react\";\r\n\r\nimport useStyled from \"./styles/GeneralStyled\";\r\nimport { Container, Box } from \"@material-ui/core\";\r\nimport Copyright from \"./Copyright\";\r\n\r\nexport interface ContainerBoardProps {}\r\n\r\nconst ContainerBoard: React.FC = ({ children }) => {\r\n  const classes = useStyled();\r\n  return (\r\n    <main className={classes.content}>\r\n      <div className={classes.appBarSpacer} />\r\n      <Container maxWidth=\"lg\" className={classes.container}>\r\n        <>{children}</>\r\n\r\n        <Box pt={4} style={{ textAlign: \"center\" }}>\r\n          <Copyright />\r\n        </Box>\r\n      </Container>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default ContainerBoard;\r\n","import React from \"react\";\r\nimport TodoSubmitForm from \"./TodoSubmitForm\";\r\nimport TodoListTable from \"./TodoListTable/TodoListTable\";\r\nimport clsx from \"clsx\";\r\n\r\n//Material UI\r\n\r\nimport { Grid, Paper } from \"@material-ui/core\";\r\n\r\n//Components\r\nimport useStyled from \"./styles/GeneralStyled\";\r\nimport RenderTodoChart from \"./StatisticChart\";\r\nimport Title from \"./Title\";\r\nimport ProgressTask from \"./ProgressTaskChart\";\r\nimport ContainerBoard from \"./ContainerBoard\";\r\nimport { Store } from \"../reducers\";\r\nimport { LocalUserInfo } from \"../reducers/authentication\";\r\nimport { connect } from \"react-redux\";\r\nimport { getGreetingSentence } from \"./utils\";\r\n\r\nexport interface TodoListAppProps {\r\n  userInfo: LocalUserInfo;\r\n}\r\n\r\nconst TodoListApp: React.SFC<TodoListAppProps> = ({ userInfo }) => {\r\n  const classes = useStyled();\r\n\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  return (\r\n    <ContainerBoard>\r\n      <h1>{userInfo.firstName && getGreetingSentence(userInfo.firstName!)}</h1>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={8} lg={8}>\r\n          <Paper className={fixedHeightPaper}>\r\n            <Title>Chart</Title>\r\n            <RenderTodoChart />\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={12} md={4} lg={4}>\r\n          <Paper className={fixedHeightPaper}>\r\n            <Title>Today Progress</Title>\r\n            <ProgressTask />\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Paper className={classes.paper}>\r\n            <Title>Todo List</Title>\r\n            <TodoSubmitForm />\r\n            <TodoListTable />\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </ContainerBoard>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: Store) => ({\r\n  userInfo: state.user.localUserInfo,\r\n});\r\n\r\nexport default connect(mapStateToProps)(TodoListApp);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ContainerBoard from \"./ContainerBoard\";\r\n\r\nexport interface NotFoundProps {}\r\n\r\nconst NotFound: React.SFC<NotFoundProps> = () => {\r\n  const [redirect, setRedirect] = useState(false);\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setRedirect(true);\r\n    }, 3000);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n  return redirect ? (\r\n    <Redirect to=\"/\" />\r\n  ) : (\r\n    <ContainerBoard>\r\n      <h1>Page Not Found, Return after 3 seconds</h1>\r\n    </ContainerBoard>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\n\r\nimport {\r\n  Toolbar,\r\n  IconButton,\r\n  Typography,\r\n  Badge,\r\n  AppBar,\r\n} from \"@material-ui/core\";\r\n\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport useStyled from \"./styles/GeneralStyled\";\r\nimport clsx from \"clsx\";\r\n\r\nexport interface ToolBarProps {\r\n  open: boolean;\r\n  handleClick: () => void;\r\n}\r\n\r\nconst ToolBar: React.SFC<ToolBarProps> = ({\r\n  open,\r\n  handleClick: openSideNavBar,\r\n}) => {\r\n  const classes = useStyled();\r\n  return (\r\n    <AppBar\r\n      position=\"absolute\"\r\n      className={clsx(classes.appBar, open && classes.appBarShift)}\r\n    >\r\n      <Toolbar className={classes.toolbar}>\r\n        <IconButton\r\n          edge=\"start\"\r\n          color=\"inherit\"\r\n          aria-label=\"open drawer\"\r\n          onClick={openSideNavBar}\r\n          className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Typography\r\n          component=\"h1\"\r\n          variant=\"h6\"\r\n          color=\"inherit\"\r\n          noWrap\r\n          className={classes.title}\r\n        >\r\n          My Todo List Board\r\n        </Typography>\r\n        <IconButton color=\"inherit\">\r\n          <Badge badgeContent={2} color=\"secondary\">\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </IconButton>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default ToolBar;\r\n","import React from \"react\";\r\n\r\nimport { ListItem, ListItemText, ListItemIcon } from \"@material-ui/core\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport interface ListItemWithNavLinkProps {\r\n  to: string;\r\n  title: string;\r\n}\r\n\r\nconst ListItemWithNavLink: React.SFC<ListItemWithNavLinkProps> = ({\r\n  to,\r\n  title,\r\n  children,\r\n}): JSX.Element => {\r\n  return (\r\n    <ListItem button component={NavLink} to={to}>\r\n      <ListItemIcon>{children}</ListItemIcon>\r\n      <ListItemText primary={title} />\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nexport default ListItemWithNavLink;\r\n","import React from \"react\";\r\n\r\nimport { List } from \"@material-ui/core\";\r\nimport {\r\n  Dashboard as DashboardIcon,\r\n  BarChart as BarChartIcon,\r\n  PersonalVideo as PersonalVideoIcon,\r\n} from \"@material-ui/icons\";\r\nimport ListItemWithNavLink from \"./ListItemWithNavLink\";\r\nimport { Store } from \"../../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { LocalUserInfo } from \"../../reducers/authentication\";\r\n\r\nexport interface SideNavBarTopProps {\r\n  user: LocalUserInfo;\r\n}\r\n\r\nconsole.log(Boolean(NaN));\r\n\r\nconst SideNavBarTop: React.SFC<SideNavBarTopProps> = ({ user }) => {\r\n  return user.uid ? (\r\n    <List>\r\n      <ListItemWithNavLink to=\"/todo\" title=\"Dashboard\">\r\n        <DashboardIcon />\r\n      </ListItemWithNavLink>\r\n      <ListItemWithNavLink to=\"/test\" title=\"Test Page\">\r\n        <BarChartIcon />\r\n      </ListItemWithNavLink>\r\n      <ListItemWithNavLink\r\n        to={`/${Math.random().toString(36).substring(7)}`}\r\n        title=\"Random page\"\r\n      >\r\n        <PersonalVideoIcon />\r\n      </ListItemWithNavLink>\r\n    </List>\r\n  ) : null;\r\n};\r\n\r\nconst mapStateToProps = (state: Store) => ({\r\n  user: state.user.localUserInfo,\r\n});\r\n\r\nexport default connect(mapStateToProps)(SideNavBarTop);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { List } from \"@material-ui/core\";\r\nimport {\r\n  ExitToApp as ExitToAppIcon,\r\n  VpnKeyOutlined as VpnKeyOutlinedIcon,\r\n  LockOutlined as LockOutlinedIcon,\r\n  Settings as SettingsIcon,\r\n} from \"@material-ui/icons\";\r\n\r\nimport ListItemWithNavLink from \"./ListItemWithNavLink\";\r\nimport { Store } from \"../../reducers\";\r\nimport { LocalUserInfo } from \"../../reducers/authentication\";\r\n\r\nexport interface SideNavBarSettingProps {\r\n  user: LocalUserInfo;\r\n}\r\n\r\nconst SideNavBarSetting: React.SFC<SideNavBarSettingProps> = ({ user }) => {\r\n  return (\r\n    <List>\r\n      {!user.uid && (\r\n        <>\r\n          <ListItemWithNavLink to=\"/signup\" title=\"Register\">\r\n            <VpnKeyOutlinedIcon />\r\n          </ListItemWithNavLink>\r\n          <ListItemWithNavLink to=\"/signin\" title=\"Login\">\r\n            <LockOutlinedIcon />\r\n          </ListItemWithNavLink>\r\n        </>\r\n      )}\r\n\r\n      {user.uid && (\r\n        <>\r\n          <ListItemWithNavLink to=\"/setting\" title=\"Account Setting\">\r\n            <SettingsIcon />\r\n          </ListItemWithNavLink>\r\n          <ListItemWithNavLink to=\"/signout\" title=\"Logout\">\r\n            <ExitToAppIcon />\r\n          </ListItemWithNavLink>\r\n        </>\r\n      )}\r\n    </List>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: Store) => ({\r\n  user: state.user.localUserInfo,\r\n});\r\n\r\nexport default connect(mapStateToProps)(SideNavBarSetting);\r\n","import React from \"react\";\r\n\r\nimport { IconButton, Drawer, Divider } from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport styled from \"../styles/GeneralStyled\";\r\n\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport SideNavBarTop from \"./SideNavBarMain\";\r\nimport SideNavBarSetting from \"./SideNavBarSetting\";\r\nimport { Store } from \"../../reducers\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport interface SideNavBarProps {\r\n  open: boolean;\r\n  closeSideNavBar: () => void;\r\n  userInitialize: boolean;\r\n}\r\n\r\nconst SideNavBar: React.SFC<SideNavBarProps> = ({\r\n  open,\r\n  closeSideNavBar,\r\n  userInitialize,\r\n}) => {\r\n  const classes = styled();\r\n\r\n  return (\r\n    <Drawer\r\n      variant=\"permanent\"\r\n      classes={{\r\n        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n      }}\r\n      open={open}\r\n    >\r\n      <div className={classes.toolbarIcon}>\r\n        <IconButton onClick={closeSideNavBar}>\r\n          <ChevronLeftIcon />\r\n        </IconButton>\r\n      </div>\r\n      <Divider />\r\n      {userInitialize ? (\r\n        <>\r\n          {\" \"}\r\n          <SideNavBarTop />\r\n          <Divider />\r\n          <SideNavBarSetting />\r\n        </>\r\n      ) : (\r\n        <p>loading...</p>\r\n      )}\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: Store) => ({\r\n  userInitialize: state.user.userInitialize,\r\n});\r\n\r\nexport default connect(mapStateToProps)(SideNavBar);\r\n","import React from \"react\";\r\n\r\nimport ContainerBoard from \"./ContainerBoard\";\r\n\r\nexport interface TestProps {}\r\n\r\nconst Test: React.SFC<TestProps> = () => {\r\n  return (\r\n    <ContainerBoard>\r\n      <h1>HELLO THIS IS A TEST 2</h1>\r\n    </ContainerBoard>\r\n  );\r\n};\r\n\r\nexport default Test;\r\n","import firebase from \"firebase\";\r\nimport \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\ninterface FirebaseConfig {\r\n  apiKey: string;\r\n  authDomain: string;\r\n  databaseURL: string;\r\n  projectId: string;\r\n  storageBucket: string;\r\n  messagingSenderId: string;\r\n  appId: string;\r\n  measurementId: string;\r\n}\r\n\r\nconst firebaseConfig: FirebaseConfig = {\r\n  apiKey: \"AIzaSyDc18A4MSWeGDPr9F0qQeI4MoYWL53LWz0\",\r\n  authDomain: \"to-do-list-a592d.firebaseapp.com\",\r\n  databaseURL: \"https://to-do-list-a592d.firebaseio.com\",\r\n  projectId: \"to-do-list-a592d\",\r\n  storageBucket: \"to-do-list-a592d.appspot.com\",\r\n  messagingSenderId: \"427078089459\",\r\n  appId: \"1:427078089459:web:7fd8f43cee3ecb8f4ad586\",\r\n  measurementId: \"G-LFJSVBZTJ6\",\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\nexport const databaseRef = firebase.database().ref();\r\n\r\nexport const todosRef = databaseRef.child(\"todos\");\r\n\r\nexport const userRef = databaseRef.child(\"users\");\r\n\r\nexport const auth = firebase.auth();\r\n","export interface AuthenticationStore {\r\n  localUserInfo: LocalUserInfo;\r\n  authenticatorStatus: AuthenticationStatus;\r\n  userInitialize: boolean;\r\n}\r\n\r\nexport interface LocalUserInfo {\r\n  uid?: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  emailAddress?: string;\r\n  password?: string;\r\n}\r\n\r\nexport interface AuthenticationStatus {\r\n  error?: string;\r\n  success?: string;\r\n}\r\n\r\nexport enum AuthenticationActionTypes {\r\n  ADD_NEW_USER = \"Add a new user\",\r\n  ADD_NEW_USER_SUCCESS = \"Add user succesfully\",\r\n  ADD_NEW_USER_FAIL = \"Display error to user\",\r\n  USER_LOGIN = \"User login action\",\r\n  USER_LOGIN_SUCCESS = \"User login successfully\",\r\n  USER_LOGIN_FAIL = \"User login fail, display error to user\",\r\n  USER_LOGIN_WATCHER = \"The status of the logged user\",\r\n  USER_LOGOUT = \"User logout action\",\r\n  FETCH_USER = \"Fetching user information from firebase\",\r\n}\r\n\r\nexport type Action =\r\n  | {\r\n      type: AuthenticationActionTypes.ADD_NEW_USER;\r\n      payload: LocalUserInfo;\r\n    }\r\n  | {\r\n      type: AuthenticationActionTypes.ADD_NEW_USER_FAIL;\r\n      payload: AuthenticationStatus;\r\n    }\r\n  | {\r\n      type: AuthenticationActionTypes.ADD_NEW_USER_SUCCESS;\r\n      payload: AuthenticationStatus;\r\n    }\r\n  | {\r\n      type: AuthenticationActionTypes.USER_LOGIN;\r\n      payload: LocalUserInfo;\r\n    }\r\n  | {\r\n      type: AuthenticationActionTypes.USER_LOGIN_SUCCESS;\r\n      payload: AuthenticationStatus;\r\n    }\r\n  | {\r\n      type: AuthenticationActionTypes.USER_LOGIN_FAIL;\r\n      payload: AuthenticationStatus;\r\n    }\r\n  | {\r\n      type: AuthenticationActionTypes.USER_LOGIN_WATCHER;\r\n      payload: string;\r\n    }\r\n  | {\r\n      type: AuthenticationActionTypes.USER_LOGOUT;\r\n    }\r\n  | {\r\n      type: AuthenticationActionTypes.FETCH_USER;\r\n      payload: LocalUserInfo;\r\n    };\r\n\r\nexport default function reducer(\r\n  state: AuthenticationStore | null = {\r\n    userInitialize: false,\r\n    authenticatorStatus: {},\r\n    localUserInfo: {},\r\n  },\r\n  action: Action\r\n) {\r\n  switch (action.type) {\r\n    case AuthenticationActionTypes.ADD_NEW_USER:\r\n      return { ...state, localUserInfo: action.payload };\r\n    case AuthenticationActionTypes.ADD_NEW_USER_SUCCESS:\r\n      return { ...state, authenticatorStatus: action.payload };\r\n    case AuthenticationActionTypes.ADD_NEW_USER_FAIL:\r\n      return { ...state, authenticatorStatus: action.payload };\r\n    case AuthenticationActionTypes.USER_LOGIN:\r\n      return { ...state, localUserInfo: action.payload };\r\n    case AuthenticationActionTypes.USER_LOGIN_SUCCESS:\r\n      return { ...state, authenticatorStatus: action.payload };\r\n    case AuthenticationActionTypes.USER_LOGIN_FAIL:\r\n      return { ...state, authenticatorStatus: action.payload };\r\n    case AuthenticationActionTypes.USER_LOGIN_WATCHER:\r\n      return {\r\n        ...state,\r\n        localUserInfo: { uid: action.payload },\r\n        userInitialize: true,\r\n      };\r\n    case AuthenticationActionTypes.FETCH_USER:\r\n      return { ...state, localUserInfo: action.payload };\r\n    case AuthenticationActionTypes.USER_LOGOUT:\r\n      return {\r\n        userInitialize: false,\r\n        localUserInfo: {},\r\n        authenticatorStatus: {},\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { Action, AuthenticationActionTypes } from \"../reducers/authentication\";\r\n\r\nexport default (): Action => {\r\n  return {\r\n    type: AuthenticationActionTypes.USER_LOGOUT,\r\n  };\r\n};\r\n","import React, { useEffect, useState, Dispatch } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport ContainerBoard from \"../ContainerBoard\";\r\nimport { auth } from \"../../services/firebase\";\r\nimport SignOutActionCreator from \"../../actionCreators/SignOutActionCreator\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport interface LogoutBoardProps {\r\n  signOutAction: () => void;\r\n}\r\n\r\nconst LogoutBoard: React.SFC<LogoutBoardProps> = ({ signOutAction }) => {\r\n  const [redirect, setRedirect] = useState(false);\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setRedirect(true);\r\n      auth.signOut();\r\n      signOutAction();\r\n    }, 3000);\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, []);\r\n  return redirect ? (\r\n    <Redirect to=\"/signin\" />\r\n  ) : (\r\n    <ContainerBoard>\r\n      <h1>Logging out, see ya :(</h1>\r\n      <h3>This page will be switched after 2 seconds</h3>\r\n    </ContainerBoard>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\r\n  signOutAction: () => dispatch(SignOutActionCreator()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(LogoutBoard);\r\n","import { makeStyles, Theme } from \"@material-ui/core\";\r\n\r\nconst useStyled = makeStyles((theme: Theme) => {\r\n  return {\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\",\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: \"40%\", // Fix IE 11 issue.\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n  };\r\n});\r\n\r\nexport default useStyled;\r\n","import React from \"react\";\r\nimport { AuthenticationStatus } from \"../../reducers/authentication\";\r\n\r\nexport interface AuthenticationMessageProps {\r\n  userStatus: AuthenticationStatus;\r\n}\r\n\r\nconst AuthenticationMessage: React.SFC<AuthenticationMessageProps> = ({\r\n  userStatus,\r\n}) => {\r\n  return (\r\n    <p style={{ color: userStatus.error ? \"red\" : \"green\" }}>\r\n      {userStatus.error\r\n        ? userStatus.error\r\n        : userStatus.success\r\n        ? userStatus.success\r\n        : \"\"}\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default AuthenticationMessage;\r\n","import React, { useState, Dispatch } from \"react\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport ContainerBoard from \"../ContainerBoard\";\r\nimport useStyled from \"../styles/AuthenticationStyled\";\r\nimport {\r\n  LocalUserInfo,\r\n  AuthenticationStatus,\r\n} from \"../../reducers/authentication\";\r\n\r\nimport {\r\n  Avatar,\r\n  Typography,\r\n  Grid,\r\n  TextField,\r\n  FormControlLabel,\r\n  Link,\r\n  Button,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport { LockOutlined as LockOutlinedIcon } from \"@material-ui/icons\";\r\nimport addUserActionCreator from \"../../actionCreators/addUserActionCreator\";\r\nimport { Store } from \"../../reducers\";\r\nimport AuthenticationMessage from \"./AuthenticationMessage\";\r\n\r\nexport interface RegisterBoardProps {\r\n  registerNewUser: (userInfo: LocalUserInfo) => void;\r\n  authenticationInfo: AuthenticationStatus;\r\n}\r\n\r\nconst RegisterBoard: React.SFC<RegisterBoardProps> = ({\r\n  registerNewUser,\r\n  authenticationInfo,\r\n}) => {\r\n  const classes = useStyled();\r\n\r\n  const [signUpInfo, setSignUpInfo] = useState<LocalUserInfo>();\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    registerNewUser(signUpInfo!);\r\n  };\r\n\r\n  return (\r\n    <ContainerBoard>\r\n      {\" \"}\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign up\r\n        </Typography>\r\n        <form className={classes.form} onSubmit={handleSubmit}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                autoFocus\r\n                label=\"First Name\"\r\n                onChange={(e) =>\r\n                  setSignUpInfo({ ...signUpInfo, firstName: e.target.value })\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                autoComplete=\"lname\"\r\n                label=\"Last Name\"\r\n                onChange={(e) =>\r\n                  setSignUpInfo({ ...signUpInfo, lastName: e.target.value })\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                autoComplete=\"email\"\r\n                label=\"Email Address\"\r\n                onChange={(e) =>\r\n                  setSignUpInfo({ ...signUpInfo, emailAddress: e.target.value })\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                type=\"password\"\r\n                autoComplete=\"current-password\"\r\n                label=\"Password\"\r\n                onChange={(e) =>\r\n                  setSignUpInfo({ ...signUpInfo, password: e.target.value })\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormControlLabel\r\n                control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\r\n                label=\"I want to receive inspiration, marketing promotions and updates via email.\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            Sign Up\r\n          </Button>\r\n          {authenticationInfo ? (\r\n            <AuthenticationMessage userStatus={authenticationInfo} />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <Link\r\n                href=\"#\"\r\n                variant=\"body2\"\r\n                component={RouterLink}\r\n                to=\"/signin\"\r\n              >\r\n                Already have an account? Sign in\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </ContainerBoard>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: Store) => ({\r\n  authenticationInfo: state.user.authenticatorStatus,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\r\n  registerNewUser: (userInfo: LocalUserInfo) => {\r\n    dispatch(addUserActionCreator(userInfo));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterBoard);\r\n","import {\r\n  Action,\r\n  AuthenticationActionTypes,\r\n  LocalUserInfo,\r\n} from \"../reducers/authentication\";\r\n\r\nexport default (userInfo: LocalUserInfo): Action => {\r\n  return {\r\n    type: AuthenticationActionTypes.ADD_NEW_USER,\r\n    payload: userInfo,\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Store } from \"../../reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { LocalUserInfo } from \"../../reducers/authentication\";\r\n\r\nexport interface ProtectedRouteProps {\r\n  userInfo: LocalUserInfo;\r\n}\r\n\r\nconst ProtectedRoute: React.SFC<ProtectedRouteProps> = ({\r\n  children,\r\n  userInfo,\r\n}) => {\r\n  if (!userInfo.uid) return <Redirect to=\"/signin\" />;\r\n  return <>{children}</>;\r\n};\r\n\r\nconst mapStateToProps = (state: Store) => ({\r\n  userInfo: state.user.localUserInfo,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ProtectedRoute);\r\n","import React, { useState, Dispatch, useEffect } from \"react\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport ContainerBoard from \"../ContainerBoard\";\r\n\r\nimport {\r\n  Typography,\r\n  TextField,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Button,\r\n  Grid,\r\n  Link,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport { LockOutlined as LockOutlinedIcon } from \"@material-ui/icons\";\r\nimport useStyled from \"../styles/AuthenticationStyled\";\r\nimport {\r\n  LocalUserInfo,\r\n  AuthenticationStatus,\r\n} from \"../../reducers/authentication\";\r\nimport signInUserActionCreator from \"../../actionCreators/signInUserActionCreator\";\r\nimport { Store } from \"../../reducers\";\r\nimport AuthenticationMessage from \"./AuthenticationMessage\";\r\n\r\nexport interface LoginBoardProps {\r\n  authenticationInfo: AuthenticationStatus;\r\n  signInAction: (user: LocalUserInfo) => void;\r\n}\r\n\r\nconst LoginBoard: React.SFC<LoginBoardProps> = ({\r\n  signInAction,\r\n  authenticationInfo,\r\n}) => {\r\n  const classes = useStyled();\r\n\r\n  const [signInInfo, SetSignInInfo] = useState<LocalUserInfo>({\r\n    emailAddress: \"minhphuongsony@gmail.com\",\r\n    password: \"123456789\",\r\n  });\r\n\r\n  const handleSubmit = () => {\r\n    signInAction(signInInfo!);\r\n  };\r\n\r\n  return (\r\n    <ContainerBoard>\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign in\r\n        </Typography>\r\n        <form\r\n          className={classes.form}\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            handleSubmit();\r\n          }}\r\n        >\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label=\"Email Address\"\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n            autoFocus\r\n            value={signInInfo?.emailAddress}\r\n            onChange={(e) =>\r\n              SetSignInInfo({ ...signInInfo, emailAddress: e.target.value })\r\n            }\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            value={signInInfo?.password}\r\n            onChange={(e) =>\r\n              SetSignInInfo({ ...signInInfo, password: e.target.value })\r\n            }\r\n          />\r\n          <FormControlLabel\r\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n            label=\"Remember me\"\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            Sign In\r\n          </Button>\r\n          {authenticationInfo ? (\r\n            <AuthenticationMessage userStatus={authenticationInfo} />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <Grid container>\r\n            <Grid item xs>\r\n              <Link href=\"#\" variant=\"body2\">\r\n                Forgot password?\r\n              </Link>\r\n            </Grid>\r\n            <Grid item>\r\n              <Link\r\n                href=\"#\"\r\n                variant=\"body2\"\r\n                component={RouterLink}\r\n                to=\"/signup\"\r\n              >\r\n                {\"Don't have an account? Sign Up\"}\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </ContainerBoard>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: Store) => ({\r\n  authenticationInfo: state.user.authenticatorStatus,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\r\n  signInAction: (user: LocalUserInfo) =>\r\n    dispatch(signInUserActionCreator(user)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginBoard);\r\n","import {\r\n  LocalUserInfo,\r\n  Action,\r\n  AuthenticationActionTypes,\r\n} from \"../reducers/authentication\";\r\n\r\nexport default (user: LocalUserInfo): Action => ({\r\n  type: AuthenticationActionTypes.USER_LOGIN,\r\n  payload: user,\r\n});\r\n","import React, { Dispatch, useEffect } from \"react\";\r\nimport { todosRef, auth, userRef } from \"../services/firebase\";\r\nimport { connect } from \"react-redux\";\r\nimport { ListReducer } from \"../reducers/list\";\r\nimport fetchTasksActionCreator from \"../actionCreators/fetchTasksActionCreator\";\r\nimport { User } from \"firebase\";\r\nimport userLoginWatcherActionCreator from \"../actionCreators/userLoginWatcherActionCreator\";\r\nimport { Store } from \"../reducers\";\r\nimport { LocalUserInfo } from \"../reducers/authentication\";\r\nimport fetchUserInfoActionCreator from \"../actionCreators/fetchUserInfoActionCreator\";\r\n\r\nexport interface FirebaseProps {\r\n  fetchTodos: (data: ListReducer[]) => void;\r\n  watchUserAuthenticateStatus: (uid: string) => void;\r\n  userInfo: LocalUserInfo;\r\n  userInitialize: boolean;\r\n  fetchUserInfoAction: (user: LocalUserInfo) => void;\r\n}\r\n\r\nconst Firebase: React.SFC<FirebaseProps> = ({\r\n  fetchTodos,\r\n  watchUserAuthenticateStatus,\r\n  userInfo,\r\n  userInitialize,\r\n  fetchUserInfoAction,\r\n}) => {\r\n  const setupTodoListener = () => {\r\n    if (userInfo.uid) {\r\n      todosRef.child(userInfo.uid).on(\"value\", (snapshot) => {\r\n        if (snapshot.val()) {\r\n          let data: ListReducer[] = Object.values(snapshot.val());\r\n          data = data.sort((a, b) => {\r\n            if (a.createdDate < b.createdDate) return -1;\r\n            if (a.createdDate > b.createdDate) return 1;\r\n            return 0;\r\n          });\r\n          fetchTodos(data);\r\n        } else {\r\n          fetchTodos([]);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const setupUserInfoListener = () => {\r\n    if (userInfo.uid) {\r\n      userRef.child(userInfo.uid).once(\"value\", (snapshot) => {\r\n        if (!snapshot.val) return;\r\n        fetchUserInfoAction(snapshot.val());\r\n      });\r\n    }\r\n  };\r\n\r\n  const setupAuthentication = () => {\r\n    auth.onAuthStateChanged((user: User | null) => {\r\n      if (user) {\r\n        return watchUserAuthenticateStatus(user.uid);\r\n      }\r\n      return watchUserAuthenticateStatus(\"\");\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setupTodoListener();\r\n    setupAuthentication();\r\n    setupUserInfoListener();\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [userInitialize, userInfo.uid]);\r\n  return null;\r\n};\r\n\r\nconst mapStateToProps = (state: Store) => ({\r\n  userInfo: state.user.localUserInfo,\r\n  userInitialize: state.user.userInitialize,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => {\r\n  return {\r\n    fetchTodos: (data: ListReducer[]) => {\r\n      return setTimeout(() => {\r\n        dispatch(fetchTasksActionCreator(data));\r\n      });\r\n    },\r\n    watchUserAuthenticateStatus: (uid: string) =>\r\n      dispatch(userLoginWatcherActionCreator(uid)),\r\n    fetchUserInfoAction: (user: LocalUserInfo) => {\r\n      dispatch(fetchUserInfoActionCreator(user));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Firebase);\r\n","import { TodoActionTypes, ListReducer, Action } from \"../reducers/list\";\r\n\r\nexport default (tasks: ListReducer[]): Action => ({\r\n  type: TodoActionTypes.FETCH_TASKS,\r\n  payload: tasks,\r\n});\r\n","import { Action, AuthenticationActionTypes } from \"../reducers/authentication\";\r\n\r\nexport default (uid: string): Action => {\r\n  return {\r\n    type: AuthenticationActionTypes.USER_LOGIN_WATCHER,\r\n    payload: uid,\r\n  };\r\n};\r\n","import {\r\n  LocalUserInfo,\r\n  Action,\r\n  AuthenticationActionTypes,\r\n} from \"../reducers/authentication\";\r\n\r\nexport default (user: LocalUserInfo): Action => ({\r\n  type: AuthenticationActionTypes.FETCH_USER,\r\n  payload: user,\r\n});\r\n","import React, { useState } from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport TodoListApp from \"./components/ToDoListBoard\";\nimport NotFound from \"./components/NotFound\";\n\n//MATERIAL UI\nimport { CssBaseline } from \"@material-ui/core\";\n\n// COMPONENT\nimport ToolBar from \"./components/ToolBar\";\nimport SideNavBar from \"./components/SideNavBar/SideNavBar\";\nimport useStyled from \"./components/styles/GeneralStyled\";\nimport Test from \"./components/test\";\nimport LogoutBoard from \"./components/Authentication/SignOutBoard\";\nimport RegisterBoard from \"./components/Authentication/SignUpBoard\";\nimport ProtectedRoute from \"./components/HOC/ProtectedRoute\";\nimport SignInBoard from \"./components/Authentication/SignInBoard\";\nimport Firebase from \"./components/Firebase\";\nimport { Store } from \"./reducers\";\nimport { connect } from \"react-redux\";\n\nexport interface AppProps {\n  userInitialize: boolean;\n}\n\nconst App: React.SFC<AppProps> = ({ userInitialize }) => {\n  const classes = useStyled();\n\n  const [open, setOpen] = useState(true);\n\n  return (\n    <div className={classes.root}>\n      <Firebase />\n\n      <CssBaseline />\n      <ToolBar open={open} handleClick={() => setOpen(true)} />\n      <SideNavBar open={open} closeSideNavBar={() => setOpen(false)} />\n\n      {userInitialize && (\n        <Switch>\n          <Route\n            path=\"/todo\"\n            render={() => (\n              <ProtectedRoute>\n                <TodoListApp />\n              </ProtectedRoute>\n            )}\n          />\n          <Route\n            path=\"/test\"\n            render={() => (\n              <ProtectedRoute>\n                <Test />\n              </ProtectedRoute>\n            )}\n          />\n          <Route path=\"/signin\" component={SignInBoard} />\n          <Route path=\"/signout\" component={LogoutBoard} />\n          <Route path=\"/signup\" component={RegisterBoard} />\n          <Route path=\"/not-found\" component={NotFound} />\n          <Redirect from=\"/\" exact to=\"/todo\" />\n          <Redirect to=\"not-found\" />\n        </Switch>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: Store) => ({\n  userInitialize: state.user.userInitialize,\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\r\nimport listReducer, { ListReducer } from \"./list\";\r\nimport userInfoReducer, { AuthenticationStore } from \"./authentication\";\r\n\r\nexport interface Store {\r\n  todoList: ListReducer[];\r\n  user: AuthenticationStore;\r\n}\r\n\r\nexport default combineReducers({\r\n  todoList: listReducer,\r\n  user: userInfoReducer,\r\n});\r\n","import { takeLatest, takeEvery, put, select } from \"redux-saga/effects\";\r\nimport { TodoActionTypes } from \"../reducers/list\";\r\nimport { todosRef, userRef, auth } from \"../services/firebase\";\r\nimport {\r\n  AuthenticationActionTypes,\r\n  Action as AuthenticateAction,\r\n} from \"../reducers/authentication\";\r\nimport firebase, { User } from \"firebase\";\r\nimport { Store } from \"../reducers\";\r\n\r\nfunction* addNewUserToFirebase(action: any) {\r\n  const { emailAddress, firstName, lastName } = action.payload;\r\n  try {\r\n    const { user }: { user: User } = yield auth.createUserWithEmailAndPassword(\r\n      action.payload.emailAddress,\r\n      action.payload.password\r\n    );\r\n\r\n    if (user) {\r\n      userRef.child(`${user.uid}`).set({\r\n        uid: user.uid,\r\n        emailAddress,\r\n        firstName,\r\n        lastName,\r\n      });\r\n\r\n      yield put<AuthenticateAction>({\r\n        type: AuthenticationActionTypes.ADD_NEW_USER_SUCCESS,\r\n        payload: {\r\n          success: \"Created user Success ! Please switch to Sign In Page\",\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put<AuthenticateAction>({\r\n      type: AuthenticationActionTypes.ADD_NEW_USER_FAIL,\r\n      payload: { error: error.message },\r\n    });\r\n  }\r\n}\r\n\r\nfunction* verifyUserFromFirebase(action: any) {\r\n  try {\r\n    const {\r\n      user,\r\n    }: { user: User } = yield firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(\r\n        action.payload.emailAddress,\r\n        action.payload.password\r\n      );\r\n    if (user) {\r\n      // What should I put in here ???\r\n\r\n      yield put<AuthenticateAction>({\r\n        type: AuthenticationActionTypes.USER_LOGIN_SUCCESS,\r\n        payload: {\r\n          success: \"Login success!\",\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put<AuthenticateAction>({\r\n      type: AuthenticationActionTypes.USER_LOGIN_FAIL,\r\n      payload: {\r\n        error: error.message,\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nconst getUserUid = (state: Store) => state.user.localUserInfo.uid;\r\n\r\nexport default function* businessLogicMW() {\r\n  yield takeEvery(TodoActionTypes.ADD_TASK, function* (action: any) {\r\n    const userUniqueId = yield select(getUserUid);\r\n    const currentUserTodos = yield todosRef.child(`${userUniqueId}`);\r\n\r\n    yield currentUserTodos\r\n      .child(`${action.payload.id}`)\r\n      .set({ ...action.payload });\r\n  });\r\n  yield takeLatest(TodoActionTypes.COMPLETE_TASK, function* (action: any) {\r\n    const { id, isComplete, updatedTime } = action.payload;\r\n\r\n    const userUniqueId = yield select(getUserUid);\r\n    const currentUserTodos = yield todosRef.child(`${userUniqueId}`);\r\n\r\n    currentUserTodos.child(`${id}`).update({ isComplete, updatedTime });\r\n  });\r\n  yield takeLatest(TodoActionTypes.UPDATE_TASK, function* (action: any) {\r\n    const { id, taskName, updatedTime } = action.payload;\r\n\r\n    const userUniqueId = yield select(getUserUid);\r\n    const currentUserTodos = yield todosRef.child(`${userUniqueId}`);\r\n\r\n    currentUserTodos.child(`${id}`).update({ taskName, updatedTime });\r\n  });\r\n  yield takeEvery(TodoActionTypes.DELETE_TASK, function* (action: any) {\r\n    const id = action.payload;\r\n\r\n    const userUniqueId = yield select(getUserUid);\r\n    const currentUserTodos = yield todosRef.child(`${userUniqueId}`);\r\n\r\n    currentUserTodos.child(`${id}`).remove();\r\n  });\r\n\r\n  //AUTHENTICATION\r\n  yield takeLatest(\r\n    AuthenticationActionTypes.ADD_NEW_USER,\r\n    addNewUserToFirebase\r\n  );\r\n  yield takeLatest(\r\n    AuthenticationActionTypes.USER_LOGIN,\r\n    verifyUserFromFirebase\r\n  );\r\n}\r\n","import { all, put, takeLatest } from \"redux-saga/effects\";\r\nimport { TodoActionTypes, Action } from \"../reducers/list\";\r\nimport businessLogicMW from \"./businessLogic\";\r\n\r\nfunction* fetchTodoListFromFirebase(action: any) {\r\n  yield put<Action>({\r\n    type: TodoActionTypes.ADD_FETCHED_TASKS,\r\n    payload: action.payload,\r\n  });\r\n}\r\n\r\nfunction* watchActionFromFirebase() {\r\n  yield takeLatest(TodoActionTypes.FETCH_TASKS, fetchTodoListFromFirebase);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([watchActionFromFirebase(), businessLogicMW()]);\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMW from \"redux-saga\";\r\n\r\nimport reducer from \"./reducers\";\r\nimport rootSaga from \"./middlewares/saga\";\r\n\r\nconst sagaMiddleWare = createSagaMW();\r\n\r\nexport default createStore(reducer, applyMiddleware(sagaMiddleWare));\r\n\r\nsagaMiddleWare.run(rootSaga);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.Fragment>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}